{"version":3,"file":"static/js/491.2884c945.chunk.js","mappings":"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","sources":["components/atoms/FormAccordionItem.tsx","components/Forms/FormCreateOrder/components/OrderGroupItem.tsx","components/Forms/FormCreateOrder/steps/OrderGroupsStuffingStep.tsx","components/Forms/FormCreateOrder/components/SelectCustomerModal.tsx","components/Forms/FormCreateOrder/components/SelectManagerModal.tsx","components/Forms/FormCreateOrder/components/CreateCustomerButtonIcon.tsx","components/Forms/FormCreateOrder/components/CustomerInfoComponent.tsx","components/Forms/FormCreateOrder/components/DestinationInputs.tsx","utils/lodash.utils.ts","../node_modules/date-fns/esm/addDays/index.js","components/Forms/FormCreateOrder/steps/OrderInfoStep.tsx","components/Forms/FormCreateOrder/FormCreateOrdersGroup.tsx","types/customers.types.ts","components/Forms/crm/FormCreateCustomer.tsx","components/atoms/CountSelectorBase.tsx","components/Overviews/order/OrderSlotOverview.tsx","components/atoms/CheckboxesListSelector.tsx","components/atoms/StepsController.tsx","components/atoms/index.tsx","data/customers.data.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport FlexBox, { FlexBoxProps } from './FlexBox';\nimport styled from 'styled-components';\nimport ButtonIcon from './ButtonIcon';\nimport { isBoolean } from 'lodash';\nimport { t } from '../../lang';\n\nexport interface FormAccordeonItemProps {\n  children?: React.ReactNode;\n  maxHeight?: string;\n  title?: React.ReactNode;\n  renderHeader?: React.ReactNode;\n  renderFooter?: React.ReactNode;\n  toggled?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  contentContainerStyle?: FlexBoxProps;\n  activeBackgroundColor?: string;\n  className?: string;\n}\n\nconst FormAccordionItem: React.FC<FormAccordeonItemProps> = ({\n  children,\n  maxHeight = '32px',\n  renderHeader,\n  renderFooter,\n  toggled = true,\n  open = false,\n  disabled,\n  contentContainerStyle,\n  activeBackgroundColor = 'rgba(220, 220, 220, 1)',\n  className,\n}) => {\n  const [isOpen, setIsOpen] = useState(!!disabled || open);\n  function handleToggleOpen() {\n    if (!toggled) return;\n    setIsOpen(prev => !prev);\n  }\n\n  useEffect(() => {\n    if (isBoolean(disabled) && disabled) {\n      setIsOpen(false);\n    }\n  }, [disabled]);\n\n  return (\n    <Container style={{ maxHeight: isOpen ? '100%' : maxHeight }} className={className}>\n      <Header\n        fillWidth\n        fxDirection={'row'}\n        className={'header'}\n        isOpen={isOpen}\n        alignItems={'center'}\n        justifyContent={'space-between'}\n        activeBackgroundColor={activeBackgroundColor}\n      >\n        <StButton\n          icon={toggled ? (isOpen ? 'SmallArrowDown' : 'SmallArrowRight') : undefined}\n          iconSize={'24px'}\n          variant={'def'}\n          onClick={handleToggleOpen}\n          disabled={!toggled || disabled || !children}\n          isOpen={isOpen}\n        >\n          {isOpen ? t('Close') : t('Open')}\n        </StButton>\n\n        {renderHeader}\n      </Header>\n\n      <ContentBox padding={'0 8px'} overflow={'hidden'} {...contentContainerStyle} className={'content'}>\n        {children}\n      </ContentBox>\n\n      {renderFooter}\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  //position: relative;\n  min-height: 32px;\n  //height: max-content;\n  max-height: 32px;\n  //overflow: hidden;\n\n  color: inherit;\n\n  border-top: 1px solid ${({ theme }) => theme.trBorderClr};\n  transition: all ${({ theme }) => theme.globals.timingFnMain};\n  &:last-child {\n    border-bottom: 1px solid ${({ theme }) => theme.trBorderClr};\n  }\n`;\n\nconst Header = styled(FlexBox)<{ isOpen?: boolean; activeBackgroundColor?: string }>`\n  min-height: 32px;\n\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 50;\n\n  color: inherit;\n  border-bottom: 1px solid ${({ theme }) => theme.trBorderClr};\n  background-color: ${({ theme }) => theme.modalBackgroundColor};\n`;\n\nconst ContentBox = styled(FlexBox)`\n  height: max-content;\n\n  transition: all ${({ theme }) => theme.globals.timingFnMain};\n`;\n\nconst StButton = styled(ButtonIcon)<{ isOpen?: boolean; activeBackgroundColor?: string }>`\n  justify-content: flex-start;\n\n  padding: 0 8px 0 0;\n\n  min-width: min-content;\n\n  flex: 1;\n\n  font-size: 14px;\n  font-weight: 500;\n  color: inherit;\n\n  fill: ${({ theme }) => theme.accentColor.base};\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: inherit;\n  }\n`;\n\nexport default FormAccordionItem;\n","import { IOrderTempSlot } from '../../../../types/orders/orders.types';\nimport { useMemo } from 'react';\nimport OrderSlotOverview from '../../../Overviews/order/OrderSlotOverview';\nimport FormAccordionItem from '../../../atoms/FormAccordionItem';\nimport styled, { useTheme } from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport ButtonIcon from '../../../atoms/ButtonIcon';\nimport { t } from 'lang';\nimport { Text } from '../../../atoms/Text';\n\nconst OrderGroupItem = ({\n  slots,\n  onRemove,\n  onUpdate,\n  renderHeader,\n  title,\n  onAddSlotPress,\n  renderFooter,\n}: {\n  slots: IOrderTempSlot[];\n  renderHeader?: React.ReactNode;\n  renderFooter?: React.ReactNode;\n  title?: React.ReactNode;\n  onRemove?: (id: string) => void;\n  onUpdate?: (slot: IOrderTempSlot) => void;\n  onAddSlotPress?: () => void;\n}) => {\n  const theme = useTheme();\n  const renderSlots = useMemo(() => {\n    return slots.map(slot => (\n      <OrderSlotOverview\n        key={`slot_${slot?.tempId}`}\n        slot={slot}\n        editable\n        onRemovePress={onRemove ? () => slot?.tempId && onRemove(slot?.tempId) : undefined}\n        onUpdate={onUpdate}\n      />\n    ));\n  }, [onRemove, onUpdate, slots]);\n\n  const renderHeaderComp = useMemo(() => {\n    return (\n      <FlexBox fxDirection={'row'} fillHeight gap={8} alignItems={'center'} padding={'2px 0'}>\n        {renderHeader || (\n          <Text $weight={500} $size={15}>\n            {title}\n          </Text>\n        )}\n\n        {onAddSlotPress && <FlexBox height={'80%'} border={`1px solid ${theme.modalBorderColor}`} />}\n\n        {onAddSlotPress && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            style={{ minWidth: 'fit-content', height: '100%', fontWeight: 600 }}\n            disabled={!onAddSlotPress}\n            onClick={onAddSlotPress}\n          >\n            {t('Add')}\n          </ButtonIcon>\n        )}\n      </FlexBox>\n    );\n  }, [onAddSlotPress, renderHeader, theme.modalBorderColor, title]);\n\n  return (\n    <>\n      <StAccordionItem open renderHeader={renderHeaderComp} renderFooter={renderFooter} title={title}>\n        {renderSlots}\n      </StAccordionItem>\n    </>\n  );\n};\n\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .header {\n  }\n  & .content {\n    padding: 0;\n  }\n`;\nexport default OrderGroupItem;\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { IOrderTempSlot } from 'types/orders/orders.types';\nimport FlexBox from '../../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport { WarehouseEntity } from '../../../../types/warehousing/warehouses.types';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport ButtonIcon from '../../../atoms/ButtonIcon';\nimport { ToastService } from 'services';\nimport { t } from 'lang';\nimport { Modals } from '../../../Modals/Modals';\nimport { useModalService } from '../../../../Providers/ModalProvider/ModalProvider';\nimport OrderGroupItem from '../components/OrderGroupItem';\nimport { getIdRef } from 'utils/data-transform';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\nimport { useMediaQuery } from 'react-responsive';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\n\nexport interface OrderGroupsStuffingStepProps extends FormOrderStepBaseProps {\n  slots?: IOrderTempSlot[];\n  onAddSlot?: (slot: IOrderTempSlot) => void;\n  onRemoveSlot?: (id: string) => void;\n}\n\nconst OrderGroupsStuffingStep: React.FC<OrderGroupsStuffingStepProps> = ({ onChangeValidStatus }) => {\n  const modalS = useModalService();\n  const service = useAppServiceProvider()[AppModuleName.orders];\n  const { slots } = useOrdersSelector().ordersGroupFormData;\n  const isMobile = useMediaQuery({ maxWidth: 480 });\n\n  const handelAddSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      service.addTempSlot(slot);\n    },\n    [service]\n  );\n  const handelRemoveSlot = useCallback(\n    (id: string) => {\n      service.removeTempSlot(id);\n    },\n    [service]\n  );\n  const handelUpdateSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      service.updateTempSlot(slot);\n    },\n    [service]\n  );\n\n  const groupedData = useMemo(() => {\n    let map: Record<string, { slots: (IOrderTempSlot & { tempId?: string })[]; warehouse?: WarehouseEntity }> = {};\n\n    slots?.map(slot => {\n      if (slot.warehouse?._id) {\n        map[slot.warehouse._id] = {\n          warehouse: slot.warehouse,\n          slots: map[slot.warehouse._id]?.slots ? [...map[slot.warehouse._id]?.slots, slot] : [slot],\n        };\n      }\n\n      return '';\n    });\n\n    return map;\n  }, [slots]);\n\n  useEffect(() => {\n    onChangeValidStatus && onChangeValidStatus(!!slots?.length && slots?.length > 0);\n  }, [onChangeValidStatus, slots?.length]);\n\n  const renderGroupedData = useMemo(() => {\n    return Object.keys(groupedData).map((k, i) => {\n      const v = groupedData[k];\n      return (\n        <OrderGroupItem\n          key={`pre-order_${v.warehouse?._id || i}`}\n          slots={v.slots}\n          title={v?.warehouse?.label}\n          onRemove={handelRemoveSlot}\n          onUpdate={handelUpdateSlot}\n          onAddSlotPress={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                params: v?.warehouse ? { warehouse: getIdRef(v?.warehouse) } : undefined,\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        />\n      );\n    });\n  }, [groupedData, handelAddSlot, handelRemoveSlot, handelUpdateSlot, modalS]);\n\n  return (\n    <Container flex={1} fillWidth overflow={'hidden'} style={{ position: 'relative' }}>\n      <Content flex={1} overflow={'auto'}>\n        <FlexBox flex={1} fillWidth>\n          {renderGroupedData}\n        </FlexBox>\n      </Content>\n\n      <Buttons fxDirection={'row'} gap={8} padding={'8px'}>\n        <ButtonIcon\n          variant={'defaultSmall'}\n          onClick={() => {\n            const res = window.confirm('Remove all items?');\n            if (res) {\n              ToastService.info('All items will be remove');\n            }\n          }}\n        >\n          {t('Remove all')}\n        </ButtonIcon>\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          flex={1}\n          onClick={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        >\n          {t(isMobile ? 'Add' : 'Add position to group')}\n        </ButtonIcon>\n      </Buttons>\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  color: ${p => p.theme.fontColorSidebar};\n`;\nconst Content = styled(FlexBox)``;\nconst Buttons = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nexport default OrderGroupsStuffingStep;\n","import { CustomerEntity } from '../../../../types/customers.types';\nimport ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { useEffect, useMemo } from 'react';\nimport { ITableListProps } from '../../../TableList/tableTypes.types';\nimport { customersColumns } from '../../../../data/customers.data';\nimport { t } from '../../../../lang';\nimport TableList from '../../../TableList/TableList';\nimport { useCustomersSelector } from '../../../../redux/selectors.store';\nimport { useModalService } from '../../../../Providers/ModalProvider/ModalProvider';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport FormCreateCustomer from '../../crm/FormCreateCustomer';\nimport { toReqData } from '../../../../utils/data-transform';\n\nexport interface SelectCustomerModalProps extends Omit<ModalFormProps, 'onSelect' | 'onSubmit'> {\n  onSelect?: (customer: CustomerEntity) => void;\n  onSubmit?: AppSubmitHandler<CustomerEntity>;\n  asReceiver?: boolean;\n}\nconst SelectCustomerModal: React.FC<SelectCustomerModalProps> = ({ onSelect, onSubmit, onClose, asReceiver, ...p }) => {\n  const customers = useCustomersSelector().customers;\n  const modalS = useModalService();\n  const service = useAppServiceProvider()[ServiceName.customers];\n\n  const tableConfigs = useMemo((): ITableListProps<CustomerEntity> => {\n    return {\n      tableData: customers,\n      tableTitles: customersColumns,\n      actionsCreator: _ctx => {\n        return [\n          { icon: 'refresh', onClick: () => service.getAll() },\n          { separator: true },\n          {\n            icon: 'plus',\n            onClick: () => {\n              const m = modalS.open({\n                ModalChildren: FormCreateCustomer,\n                modalChildrenProps: {\n                  onSubmit: d => {\n                    service.create({ data: toReqData(d) as never, onSuccess: m?.onClose });\n                  },\n                },\n              });\n            },\n          },\n        ];\n      },\n      onRowClick: data => {\n        if (data?.rowData && onSelect) {\n          onSelect(data.rowData);\n          onClose && onClose();\n        }\n      },\n    };\n  }, [service, customers, onClose, modalS, onSelect]);\n\n  useEffect(() => {\n    service.getAll({\n      data: { refresh: true, params: {} },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalForm\n      fillWidth\n      fillHeight\n      title={t(asReceiver ? 'Select receiver' : 'Select customer')}\n      onClose={onClose}\n      {...p}\n    >\n      <TableList {...tableConfigs} />\n    </ModalForm>\n  );\n};\n\nexport default SelectCustomerModal;\n","import ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { PermissionEntity, PermissionRecipientEnum } from '../../../../types/permissions.types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { usersDirColumns } from '../../../../data/usersDir.data';\nimport { t } from '../../../../lang';\nimport { useMemo, useState } from 'react';\nimport { usePermissionsSelector } from '../../../../redux/selectors.store';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\n\nexport interface SelectManagerModalProps extends Omit<ModalFormProps, 'onSubmit' | 'onSelect'> {\n  onSelect?: (manager: PermissionEntity) => void;\n  onSubmit?: AppSubmitHandler<PermissionEntity>;\n}\n\nconst SelectManagerModal: React.FC<SelectManagerModalProps> = ({ onSubmit, onSelect, onClose, ...p }) => {\n  const { users, permission } = usePermissionsSelector();\n  const service = useAppServiceProvider()[AppModuleName.permissions];\n\n  const [isLoading] = useState(false);\n\n  const tableConfigs = useMemo((): ITableListProps<PermissionEntity> => {\n    return {\n      tableData: users.filter(el => !el.integration),\n      onRowClick: data => {\n        const res = users.find(pr => pr._id === data?.rowId);\n        res && onSelect && onSelect(res);\n      },\n      actionsCreator: ctx => {\n        return [\n          {\n            name: 'refresh',\n            icon: 'refresh',\n            onClick: () => {\n              permission.company?._id &&\n                service.getAllByCompanyId({\n                  data: { _id: permission.company?._id, params: { recipient: PermissionRecipientEnum.user } },\n                });\n            },\n          },\n        ];\n      },\n    };\n  }, [onSelect, permission.company?._id, service, users]);\n\n  return (\n    <ModalForm fillWidth fillHeight onClose={onClose} title={t('Select manager')}>\n      <TableList tableTitles={usersDirColumns} {...tableConfigs} hasSearch={false} isLoading={isLoading} />\n    </ModalForm>\n  );\n};\nexport default SelectManagerModal;\n","import { CustomerEntity } from '../../../../types/customers.types';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useModalService } from '../../../../Providers/ModalProvider/ModalProvider';\nimport ButtonIcon from '../../../atoms/ButtonIcon';\nimport FormCreateCustomer from '../../crm/FormCreateCustomer';\nimport { t } from '../../../../lang';\nimport { toReqData } from '../../../../utils/data-transform';\nimport * as React from 'react';\n\nconst CreateCustomerButtonIcon = ({\n  onSuccess,\n  isReceiver,\n}: {\n  onSuccess?: (customer: CustomerEntity) => void;\n  isReceiver?: boolean;\n}) => {\n  const customerS = useAppServiceProvider()[ServiceName.customers];\n  const modalS = useModalService();\n\n  return (\n    <ButtonIcon\n      variant={'onlyIcon'}\n      icon={'plus'}\n      iconSize={'100%'}\n      size={'30px'}\n      onClick={() => {\n        const m = modalS.open({\n          ModalChildren: FormCreateCustomer,\n          modalChildrenProps: {\n            title: isReceiver ? t('Create receiver') : undefined,\n            onSubmit: d => {\n              customerS.create({\n                data: toReqData(d) as never,\n                onSuccess: d => {\n                  onSuccess && onSuccess(d);\n\n                  m?.onClose();\n                },\n              });\n            },\n          },\n        });\n      }}\n    ></ButtonIcon>\n  );\n};\nexport default CreateCustomerButtonIcon;\n","import { CustomerEntity } from '../../../../types/customers.types';\nimport { useTheme } from 'styled-components';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { Text } from '../../../atoms/Text';\nimport { t } from '../../../../lang';\n\nconst CustomerInfoComponent = ({\n  info,\n  isReceiver,\n  isManager,\n}: {\n  info?: CustomerEntity;\n  isReceiver?: boolean;\n  isManager?: boolean;\n}) => {\n  const theme = useTheme();\n  const renderCells = useMemo(() => {\n    if (!info) return undefined;\n\n    return getCustomerInfoComponentCells({ info: warehouse, isReceiver, isManager }).map(\n      ({ label, getValue, visible }) => {\n        return (\n          visible && (\n            <FlexBox\n              key={label}\n              gap={2}\n              padding={'4px'}\n              flex={'1 1 50%'}\n              maxWidth={'50%'}\n              border={`1px solid ${theme.modalBorderColor}`}\n            >\n              <Text $size={10}>{label}</Text>\n              <Text $align={'right'} $size={12} $weight={600}>\n                {getValue(info)}\n              </Text>\n            </FlexBox>\n          )\n        );\n      }\n    );\n  }, [info, isManager, isReceiver, theme.modalBorderColor]);\n\n  return (\n    <FlexBox fillWidth flexWrap={'wrap'} fxDirection={'row'} border={`1px solid ${theme.modalBorderColor}`}>\n      {renderCells}\n    </FlexBox>\n  );\n};\n\nexport default CustomerInfoComponent;\nfunction getCustomerInfoComponentCells({\n  isManager,\n}: {\n  info?: CustomerEntity;\n  isReceiver?: boolean;\n  isManager?: boolean;\n}) {\n  return [\n    { label: t('label'), getValue: (info?: CustomerEntity) => info?.label?.base || '---', visible: !isManager },\n    { label: t('name'), getValue: (info?: CustomerEntity) => info?.name?.first || '---', visible: true },\n    { label: t('Middle name'), getValue: (info?: CustomerEntity) => info?.name?.middle || '---', visible: true },\n    { label: t('secondName'), getValue: (info?: CustomerEntity) => info?.name?.second || '---', visible: true },\n    { label: t('email'), getValue: (info?: CustomerEntity) => info?.email || '---', visible: true },\n    { label: t('taxCode'), getValue: (info?: CustomerEntity) => info?.taxCode?.corp || '---', visible: !isManager },\n    {\n      label: t('personalTaxCode'),\n      getValue: (info?: CustomerEntity) => info?.taxCode?.personal || '---',\n      visible: !isManager,\n    },\n    { label: t('tags'), getValue: (info?: CustomerEntity) => info?.tags?.join(', ') || '---', visible: !isManager },\n  ];\n}\n","import { AddressDto } from 'redux/app-redux.types';\nimport { HTMLAttributes } from 'react';\nimport { t } from 'lang';\n\nexport const destinationAddressInputsProps: ({\n  name: keyof AddressDto;\n  label: string;\n  required?: boolean;\n} & HTMLAttributes<HTMLInputElement>)[] = [\n  { name: 'country', label: t('Country'), required: false },\n  { name: 'region', label: t('Region'), required: false },\n  { name: 'area', label: t('Area'), required: false },\n  { name: 'city', label: t('City'), required: false },\n  { name: 'street', label: t('Street'), required: false },\n  { name: 'house', label: t('House'), required: false },\n  { name: 'office', label: t('Office'), required: false },\n  { name: 'room', label: t('Room'), required: false },\n];\n","import _ from 'lodash';\nimport { AnyFn } from './types';\n\nexport const throttledLogger = _.throttle((...args: any) => {\n  console.log('Throttled Logger', ...args);\n}, 5000);\n\nexport const throttleCallback = _.throttle(<T extends AnyFn>(fn: T) => {\n  console.log(throttleCallback.name);\n\n  fn();\n}, 3000);\n\nexport const throttledCallback = <Fn extends AnyFn>(fn: Fn, wait: number = 3000) => {\n  console.log('throttledCallback return');\n  return _.throttle(fn, wait);\n};\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import FlexBox from 'components/atoms/FlexBox';\nimport styled from 'styled-components';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { t } from 'lang';\nimport { Text } from 'components/atoms/Text';\nimport FormAccordionItem from '../../../atoms/FormAccordionItem';\nimport InputLabel from 'components/atoms/Inputs/InputLabel';\nimport { ICreateOrderInfoFormState } from 'types/orders/orders.types';\nimport { useModalService } from '../../../../Providers/ModalProvider/ModalProvider';\nimport ButtonIcon from 'components/atoms/ButtonIcon';\nimport SelectCustomerModal from '../components/SelectCustomerModal';\nimport TagButtonsFilter from 'components/atoms/TagButtonsFilter';\nimport SelectManagerModal from '../components/SelectManagerModal';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\nimport CheckboxesListSelector from 'components/atoms/CheckboxesListSelector';\nimport { useTranslatedMethodsList } from 'hooks/useTranslatedMethodsList.hook';\nimport ButtonSwitch from '../../../atoms/ButtonSwitch';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport { useFormContext, UseFormSetValue } from 'react-hook-form';\nimport CreateCustomerButtonIcon from '../components/CreateCustomerButtonIcon';\nimport CustomerInfoComponent from '../components/CustomerInfoComponent';\nimport { destinationAddressInputsProps } from '../components/DestinationInputs';\nimport { throttleCallback } from '../../../../utils/lodash.utils';\nimport {\n  useCommunicationSelector,\n  useDeliveriesSelector,\n  useInvoicesSelector,\n} from '../../../../redux/selectors.store';\nimport * as fns from 'date-fns';\nimport { toInputValueDate } from '../../../../utils';\nimport { PaymentInternalTypeEnum } from '../../../../types/integrations.types';\n\nexport interface OrderInfoStepProps extends FormOrderStepBaseProps {\n  isGroup?: boolean;\n}\n\nconst useOrderInfoForm = () => useFormContext<ICreateOrderInfoFormState>();\n\ntype ConfirmsStateKay =\n  | 'hasDelivery'\n  | 'hasDeliveryInvoice'\n  | 'hasReceiverInfo'\n  | 'hasExecuteDate'\n  | 'holdDeliveryPayment'\n  | 'holdOrderPayment'\n  | 'hasImposedPayment';\n\n// type FormFieldPaths = Path<ICreateOrderInfoFormState>;\n\nconst OrderInfoStep: React.FC<OrderInfoStepProps> = ({ onChangeValidStatus }) => {\n  const modalS = useModalService();\n  const {\n    formState: { isValid, errors },\n    register,\n    setValue,\n    unregister,\n    watch,\n    trigger,\n  } = useOrderInfoForm();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [intMethodType, _setIntMethodType] = useState<PaymentInternalTypeEnum>(PaymentInternalTypeEnum.externalService);\n\n  const formValues = watch();\n\n  const deliveryMethodsList = useTranslatedMethodsList(useDeliveriesSelector().methods, { withFullLabel: true });\n  const communicationMethodsList = useTranslatedMethodsList(useCommunicationSelector().methods, {\n    withFullLabel: true,\n  });\n  const invoicingMethods = useTranslatedMethodsList(useInvoicesSelector().methods, { withFullLabel: true });\n\n  // const filteredInvMethods = useMemo(() => {\n  //   return invoicingMethods.filter(m => m.type?.internal === intMethodType);\n  // }, [intMethodType, invoicingMethods]);\n\n  const [confirms, setConfirms] = useState<Record<ConfirmsStateKay | string, boolean>>({\n    hasDelivery: !!formValues.deliveryInfo,\n    hasDeliveryInvoice: !!formValues.deliveryInfo?.invoiceInfo,\n    hasReceiverInfo: !!formValues.receiver,\n    hasExecuteDate: !!formValues.shipmentInfo?.executeAt,\n  });\n\n  // const hasImposedPayment = useMemo(() => {\n  //   return (\n  //     formValues.invoiceInfo?.method?.type?.internal &&\n  //     [PaymentInternalTypeEnum.imposedPayment, PaymentInternalTypeEnum.bonuses_imposedPayment].includes(\n  //       formValues.invoiceInfo?.method?.type?.internal\n  //     )\n  //   );\n  // }, [formValues.invoiceInfo?.method?.type?.internal]);\n\n  const handleOnChangeValue: UseFormSetValue<ICreateOrderInfoFormState> = (path, value) => {\n    try {\n      setValue(path, value as never, { shouldTouch: true });\n      throttleCallback(() =>\n        trigger()\n          .then(isValid => {\n            isValid && onChangeValidStatus && onChangeValidStatus(isValid);\n          })\n          .catch(e => {\n            console.error('handleOnChangeValue trigger error', e);\n          })\n      );\n    } catch (e) {\n      console.error('handleOnChangeValue: ', e);\n    }\n  };\n  const registerConfirmSelectHandler = (name: ConfirmsStateKay) => {\n    return (value: boolean) => {\n      setConfirms(p => ({ ...p, [name]: value }));\n\n      if (value) {\n        if (name === 'hasExecuteDate') {\n          return setValue('shipmentInfo.executeAt', fns.format(fns.addDays(new Date(), 1), 'yyyy-MM-dd'));\n        }\n        if (name === 'hasDeliveryInvoice') {\n          return setValue('deliveryInfo.invoiceInfo.expireAt', toInputValueDate(fns.addDays(new Date(), 1)));\n        }\n      } else if (!value) {\n        if (name === 'hasReceiverInfo') {\n          return unregister('receiver');\n        }\n        if (name === 'hasDeliveryInvoice') {\n          return unregister('deliveryInfo.invoiceInfo');\n        }\n        if (name === 'hasDelivery') {\n          return unregister('deliveryInfo');\n        }\n      }\n    };\n  };\n  const registerSwitch = (name: ConfirmsStateKay) => {\n    return { name, onChange: registerConfirmSelectHandler(name), value: confirms[name] };\n  };\n\n  useEffect(() => {\n    if (onChangeValidStatus) onChangeValidStatus(isValid);\n  }, [isValid, onChangeValidStatus]);\n\n  return (\n    <Inputs flex={1} overflow={'auto'}>\n      <FlexBox fillWidth gap={8} padding={'8px 2px'} style={{ maxWidth: 480, width: '100%', margin: '0 auto' }}>\n        {formValues?.manager && (\n          <InputLabel label={t('Manager')}>\n            <CustomerInfoComponent info={formValues?.manager?.user as never} isManager />\n          </InputLabel>\n        )}\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          onClick={() => {\n            const m = modalS.open({\n              ModalChildren: SelectManagerModal,\n              modalChildrenProps: {\n                onSelect: pr => {\n                  handleOnChangeValue('manager', pr);\n                  m?.onClose && m?.onClose();\n                },\n              },\n            });\n          }}\n        >\n          {t(!formValues?.manager ? 'Select manager' : 'Change manager')}\n        </ButtonIcon>\n      </FlexBox>\n\n      <FlexBox padding={'0 2px'}>\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 0', gap: 8 }}\n          open\n          renderHeader={<AccordionItemTitle title={t('Customer')} />}\n        >\n          {formValues?.customer && (\n            <>\n              <InputLabel label={t('Customer information')}>\n                <CustomerInfoComponent info={formValues?.customer} />\n              </InputLabel>\n\n              <BorderedBox fillWidth overflow={'hidden'}>\n                <InputLabel label={t('Communication methods')}>\n                  <TagButtonsFilter\n                    numColumns={2}\n                    value={[formValues?.communication?.customer?._id ?? '']}\n                    resetButtonLabel={t('Not needed')}\n                    options={communicationMethodsList}\n                    resetButtonPosition={'start'}\n                    onSelect={({ value }) => {\n                      handleOnChangeValue('communication.customer', { _id: value });\n                    }}\n                  />\n                </InputLabel>\n              </BorderedBox>\n            </>\n          )}\n\n          <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n            <CreateCustomerButtonIcon\n              onSuccess={d => {\n                handleOnChangeValue('customer', d);\n              }}\n            />\n\n            <ButtonIcon\n              variant={'outlinedSmall'}\n              flex={1}\n              onClick={() => {\n                const m = modalS.open({\n                  ModalChildren: SelectCustomerModal,\n                  modalChildrenProps: {\n                    onSelect: data => {\n                      handleOnChangeValue('customer', data);\n                      m?.onClose && m?.onClose();\n                    },\n                  },\n                });\n              }}\n            >\n              {t(!formValues?.customer ? 'Select customer' : 'Change customer')}\n            </ButtonIcon>\n          </FlexBox>\n\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Receiver')}>\n              <ButtonSwitch\n                {...registerSwitch('hasReceiverInfo')}\n                rejectLabel={t('The same')}\n                acceptLabel={t('Another')}\n              />\n            </InputLabel>\n          </BorderedBox>\n        </StAccordionItem>\n\n        {confirms?.hasReceiverInfo && (\n          <StAccordionItem\n            contentContainerStyle={{ padding: '8px 0', gap: 8 }}\n            open\n            renderHeader={<AccordionItemTitle title={t('Receiver')} />}\n          >\n            {formValues?.receiver && (\n              <>\n                <InputLabel label={t('Receiver information')}>\n                  <CustomerInfoComponent info={formValues?.receiver} />{' '}\n                </InputLabel>\n\n                <BorderedBox fillWidth>\n                  <InputLabel label={t('Communication methods')}>\n                    <TagButtonsFilter\n                      numColumns={2}\n                      value={[formValues?.communication?.receiver?._id ?? '']}\n                      resetButtonLabel={t('Without')}\n                      options={communicationMethodsList.map(mtd => ({ ...mtd, value: mtd._id }))}\n                      resetButtonPosition={'start'}\n                      onSelect={({ value }) => {\n                        handleOnChangeValue('communication.receiver', { _id: value });\n                      }}\n                    />\n                  </InputLabel>\n                </BorderedBox>\n              </>\n            )}\n\n            <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n              <CreateCustomerButtonIcon\n                isReceiver\n                onSuccess={d => {\n                  handleOnChangeValue('receiver', d);\n                }}\n              />\n\n              <ButtonIcon\n                variant={'outlinedSmall'}\n                flex={1}\n                onClick={() => {\n                  const m = modalS.open({\n                    ModalChildren: SelectCustomerModal,\n                    modalChildrenProps: {\n                      onSelect: i => {\n                        handleOnChangeValue('receiver', i);\n                        m?.onClose && m?.onClose();\n                      },\n                    },\n                  });\n                }}\n              >\n                {t(!formValues?.receiver ? 'Select receiver' : 'Change receiver')}\n              </ButtonIcon>\n            </FlexBox>\n          </StAccordionItem>\n        )}\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '0 2px' }}\n          open\n          renderHeader={<AccordionItemTitle title={t('Shipment')} />}\n        >\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Another execute date')}>\n              <ButtonSwitch {...registerSwitch('hasExecuteDate')} />\n            </InputLabel>\n\n            {confirms?.hasExecuteDate && (\n              <InputLabel label={t('Execute at')} required={confirms?.hasExecuteDate}>\n                <InputText\n                  placeholder={t('Execute at')}\n                  type={'date'}\n                  required={confirms?.hasExecuteDate}\n                  {...register('shipmentInfo.executeAt', { required: confirms?.hasExecuteDate })}\n                />\n              </InputLabel>\n            )}\n          </BorderedBox>\n\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Delivery')}>\n              <ButtonSwitch {...registerSwitch('hasDelivery')} />\n            </InputLabel>\n          </BorderedBox>\n        </StAccordionItem>\n\n        {confirms?.hasDelivery && (\n          <StAccordionItem\n            contentContainerStyle={{ padding: '0 2px' }}\n            open\n            renderHeader={<AccordionItemTitle title={t('Delivery')} />}\n          >\n            <BorderedBox fillWidth gap={8}>\n              <InputLabel label={t('Delivery method')} required>\n                <CheckboxesListSelector\n                  options={deliveryMethodsList}\n                  currentOption={formValues?.deliveryInfo?.method}\n                  onChangeIndex={i => {\n                    handleOnChangeValue('deliveryInfo.method', deliveryMethodsList[i]);\n                  }}\n                />\n              </InputLabel>\n            </BorderedBox>\n\n            <BorderedBox fillWidth style={{ columnGap: 8, display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n              {destinationAddressInputsProps.map(({ name, label, required }) => {\n                return (\n                  <InputLabel\n                    key={`dest-addr-${label}`}\n                    label={label}\n                    error={errors?.deliveryInfo?.destination ? errors?.deliveryInfo?.destination[name] : undefined}\n                    required={required}\n                  >\n                    <InputText\n                      required={required}\n                      placeholder={label}\n                      {...register(`deliveryInfo.destination.${name}`, { required })}\n                    />\n                  </InputLabel>\n                );\n              })}\n            </BorderedBox>\n\n            <BorderedBox fillWidth gap={8}>\n              <InputLabel label={t('Has payment')} required>\n                <ButtonSwitch {...registerSwitch('hasDeliveryInvoice')} />\n              </InputLabel>\n            </BorderedBox>\n\n            <BorderedBox fillWidth gap={8}>\n              {confirms?.hasDeliveryInvoice && (\n                <>\n                  <InputLabel label={t('Payment method')} required>\n                    <CheckboxesListSelector\n                      options={invoicingMethods}\n                      currentOption={formValues?.deliveryInfo?.invoiceInfo?.method}\n                      onChangeIndex={i => {\n                        handleOnChangeValue('deliveryInfo.invoiceInfo.method', invoicingMethods[i]);\n                      }}\n                    />\n                  </InputLabel>\n\n                  <InputLabel label={t('Expired at')} required>\n                    <InputText\n                      placeholder={t('Expired at')}\n                      type={'datetime-local'}\n                      required\n                      {...register('deliveryInfo.invoiceInfo.expireAt', { required: true })}\n                    />\n                  </InputLabel>\n                </>\n              )}\n            </BorderedBox>\n          </StAccordionItem>\n        )}\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 2px' }}\n          open\n          renderHeader={<AccordionItemTitle title={t('Invoicing')} />}\n        >\n          {/*<ButtonsGroup*/}\n          {/*  options={invMethodCategoryFilterOptions}*/}\n          {/*  currentOption={{ value: intMethodType }}*/}\n          {/*  onChangeIndex={i => setIntMethodType(invMethodCategoryFilterOptions[i].value)}*/}\n          {/*/>*/}\n\n          {/*<InputLabel label={t('Method')} required>*/}\n          {/*  <CheckboxesListSelector*/}\n          {/*    options={filteredInvMethods}*/}\n          {/*    currentOption={formValues?.invoiceInfo?.method}*/}\n          {/*    onChangeIndex={i => {*/}\n          {/*      handleOnChangeValue('invoiceInfo.method', invoicingMethods[i]);*/}\n          {/*    }}*/}\n          {/*    renderLabel={*/}\n          {/*      intMethodType === PaymentInternalTypeEnum.bankTransfer*/}\n          {/*        ? info => {*/}\n          {/*            return (*/}\n          {/*              <FlexBox gap={4}>*/}\n          {/*                <Text $size={11} $weight={600}>*/}\n          {/*                  {t('IBAN')}*/}\n          {/*                </Text>*/}\n          {/*                <Text $size={13}>{info.option?.bankAccount?.iban}</Text>*/}\n\n          {/*                <Text $size={11} $weight={600}>*/}\n          {/*                  {t('Tax code')}*/}\n          {/*                </Text>*/}\n          {/*                <Text $size={13}>{info.option?.bankAccount?.taxId ?? '---'}</Text>*/}\n\n          {/*                <Text $size={11} $weight={600}>*/}\n          {/*                  {t('Bank')}*/}\n          {/*                </Text>*/}\n          {/*                <Text $size={13}>{info.option?.bankAccount?.bank?.label ?? '---'}</Text>*/}\n          {/*              </FlexBox>*/}\n          {/*            );*/}\n          {/*          }*/}\n          {/*        : null*/}\n          {/*    }*/}\n          {/*  />*/}\n          {/*</InputLabel>*/}\n\n          <InputLabel label={t('Expired at')} required>\n            <InputText\n              placeholder={t('Expired at')}\n              type={'datetime-local'}\n              required\n              {...register('invoiceInfo.expireAt', { required: true })}\n            />\n          </InputLabel>\n        </StAccordionItem>\n      </FlexBox>\n    </Inputs>\n  );\n};\nconst AccordionItemTitle = ({ title }: { title: string }) => {\n  return (\n    <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n      {title}\n    </Text>\n  );\n};\nconst Inputs = styled(FlexBox)``;\n\nconst BorderedBox = styled(FlexBox)`\n  padding-bottom: 8px;\n\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .content {\n    max-width: 480px;\n    width: 100%;\n    margin: auto;\n  }\n`;\n\nexport default OrderInfoStep;\n","import { ModalFormProps } from '../../ModalForm';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { enumToFilterOptions, toInputValueDate, useStepsHandler } from '../../../utils';\nimport TabSelector from '../../atoms/TabSelector';\nimport { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { ModalHeader } from '../../atoms';\nimport { t } from '../../../lang';\nimport StepsController from '../../atoms/StepsController';\nimport OrderGroupsStuffingStep from './steps/OrderGroupsStuffingStep';\nimport OrderInfoStep from './steps/OrderInfoStep';\nimport { ICreateOrderInfoFormState, OrderEntity } from '../../../types/orders/orders.types';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { ToastService } from '../../../services';\nimport _ from 'lodash';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { orderInfoBaseSchema } from '../validation';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport * as fns from 'date-fns';\nimport { FieldErrors } from 'react-hook-form/dist/types/errors';\nimport { apiCall, OrdersApi } from '../../../api';\nimport { IOrderTempSlot } from '../../../types/orders/order-slot.types';\n\nexport interface FormCreateOrdersGroupProps\n  extends Omit<ModalFormProps<any, any, FormCreateOrdersGroupStepsData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<FormCreateOrdersGroupStepsData>;\n}\n\nexport interface FormCreateOrdersGroupStepsData {\n  slots?: IOrderTempSlot[];\n  info?: ICreateOrderInfoFormState;\n\n  orders?: OrderEntity[];\n}\n\nexport enum FormCreateOrdersGroupStepsEnum {\n  Stuffing = 'Stuffing',\n  Info = 'Info',\n}\n\nconst steps = enumToFilterOptions(FormCreateOrdersGroupStepsEnum);\n\nconst stepsProcessInitialState: Record<FormCreateOrdersGroupStepsEnum | string, boolean> = {\n  [FormCreateOrdersGroupStepsEnum.Stuffing]: true,\n  [FormCreateOrdersGroupStepsEnum.Info]: false,\n};\nconst FormCreateOrdersGroup: React.FC<FormCreateOrdersGroupProps> = ({ onClose }) => {\n  const service = useAppServiceProvider()[ServiceName.orders];\n  const currentGroupFormState = useOrdersSelector().ordersGroupFormData;\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { stepsMap, stepIdx, setNextStep, setPrevStep, getCurrentStep, isLast } = useStepsHandler(steps);\n  const [isStepFinished, setIsStepFinished] =\n    useState<Record<FormCreateOrdersGroupStepsEnum | string, boolean>>(stepsProcessInitialState);\n\n  const handleValidStatus = (name: keyof typeof FormCreateOrdersGroupStepsEnum) => (value: boolean) => {\n    setIsStepFinished(p => ({ ...p, [FormCreateOrdersGroupStepsEnum[name]]: value }));\n  };\n\n  const formOrderInfo = useForm<ICreateOrderInfoFormState>({\n    defaultValues: {\n      ...currentGroupFormState.info,\n      invoiceInfo: {\n        ...currentGroupFormState.info?.invoiceInfo,\n        expireAt: currentGroupFormState.info?.invoiceInfo?.expireAt ?? toInputValueDate(fns.addDays(new Date(), 1)),\n      },\n    },\n    resolver: yupResolver(orderInfoBaseSchema),\n    reValidateMode: 'onSubmit',\n  });\n  const { watch, handleSubmit } = formOrderInfo;\n  const orderInfoFormValues = watch();\n\n  const renderStep = useMemo(() => {\n    if (stepsMap?.Stuffing) {\n      return <OrderGroupsStuffingStep onChangeValidStatus={handleValidStatus('Stuffing')} />;\n    }\n    if (stepsMap?.Info) {\n      return <OrderInfoStep onChangeValidStatus={handleValidStatus('Info')} isGroup />;\n    }\n  }, [stepsMap?.Info, stepsMap?.Stuffing]);\n\n  const canGoNext = useMemo(() => {\n    return isStepFinished[getCurrentStep().value];\n  }, [getCurrentStep, isStepFinished]);\n\n  const handlePrevPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    setPrevStep();\n  };\n\n  const handleNextPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    if (canGoNext) {\n      setNextStep();\n    } else {\n      ToastService.error(`${t('Step is not finished')}: \"${getCurrentStep().value.toUpperCase()}\"`);\n    }\n  };\n\n  const onValidSubmit = (data: ICreateOrderInfoFormState) => {\n    if (!isLast) {\n      ToastService.error('Form data is not valid');\n      return;\n    }\n\n    apiCall(OrdersApi.groups.createByWarehouse, {\n      data: {\n        info: service.toOrderInfoReqData(orderInfoFormValues, {\n          omitPathArr: [],\n        }),\n        slots: service.toOrderSlotsReqData(currentGroupFormState.slots),\n      },\n      onLoading: setIsSubmitting,\n      logError: true,\n      logResData: true,\n    });\n  };\n  const onErrorSubmit = (errors: FieldErrors<ICreateOrderInfoFormState>) => {\n    console.log(onErrorSubmit.name, errors);\n  };\n\n  return (\n    <FormProvider {...formOrderInfo}>\n      <Form onSubmit={handleSubmit(onValidSubmit, onErrorSubmit)}>\n        <ModalHeader title={t('Create orders group by warehouse')} onBackPress={onClose} />\n\n        <Content fillWidth flex={1} overflow={'hidden'}>\n          <TabSelector options={steps} asStepper currentIndex={stepIdx} optionProps={{ fitContentH: true }} />\n\n          {renderStep}\n        </Content>\n\n        <Footer padding={'8px'}>\n          <StepsController\n            steps={steps}\n            onNextPress={handleNextPress}\n            onPrevPress={handlePrevPress}\n            currentIndex={stepIdx}\n            canGoNext={true}\n            canSubmit={isLast}\n            submitButton\n            isLoading={isSubmitting}\n            onCancelPress={stepIdx === 0 ? onClose : undefined}\n          />\n        </Footer>\n      </Form>\n    </FormProvider>\n  );\n};\nconst Form = styled.form`\n  color: ${p => p.theme.fontColorSidebar};\n\n  display: flex;\n  flex-direction: column;\n\n  width: 98vw;\n  height: 98vh;\n  padding: 0 8px;\n\n  background-color: ${p => p.theme.modalBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nconst Footer = styled(FlexBox)``;\nexport default FormCreateOrdersGroup;\n","import { ApiQueryParams } from '../api';\nimport { IFormDataValueWithID, OnlyUUID } from '../redux/app-redux.types';\nimport { OrderEntity } from './orders/orders.types';\nimport { HasCompany, HasMagicLink, HasReference, MaybeNull, UUID } from './utils.types';\nimport { ProfileEntity } from './profile/profile.type';\nimport { AddressDto } from './addresses/addresses.types';\nimport { ContactsDto } from './contacts/contacts.types';\n\nexport enum CustomerTypeEnum {\n  active = 'active',\n}\n\nexport enum EngagementSource {\n  facebook = 'facebook',\n  instagram = 'instagram',\n  referralSystem = 'referralSystem',\n  another = 'another',\n}\n\nexport interface HasCustomer {\n  receiver?: MaybeNull<CustomerEntity>;\n}\n\nexport interface HasReceiver {\n  receiver?: MaybeNull<CustomerEntity>;\n}\n\nexport interface ICustomerBase extends ProfileEntity {}\nexport interface CustomerEntity extends ICustomerBase, HasMagicLink, HasCompany, HasReference {\n  orders?: OrderEntity[];\n\n  referer?: CustomerEntity;\n  referrals?: CustomerEntity[];\n}\n\nexport interface ICustomerDto\n  extends Omit<ICustomerBase, '_id' | 'createdAt' | 'updatedAt' | 'deletedAt' | 'contacts' | 'addresses'> {\n  referrer?: OnlyUUID;\n  referrerId?: UUID;\n}\n\nexport interface ICustomerFormData extends ICustomerDto {\n  referrer?: IFormDataValueWithID;\n\n  addresses?: AddressDto[];\n  contacts?: ContactsDto[];\n}\n\nexport interface ICustomerReqDta {\n  _id?: string;\n  data?: ICustomerDto;\n  params?: Pick<ApiQueryParams, 'email' | 'reference' | 'referenceType' | 'phone' | 'ids' | 'ownerId' | 'userId'>;\n}\n","import { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { EngagementSource, ICustomerFormData } from '../../../types/customers.types';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport { t } from '../../../lang';\nimport styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\nimport { businessSubjectTypeFilterOptions } from '../../../data/companies.data';\nimport { useForm } from 'react-hook-form';\nimport ButtonIcon from '../../atoms/ButtonIcon';\nimport CheckboxesListSelector from '../../atoms/CheckboxesListSelector';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport { useMemo } from 'react';\nimport { ConfigService } from '../../../services';\nimport { BusinessSubjectTypeEnum } from '../../../types/companies.types';\nimport _ from 'lodash';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\nimport { IEmbeddedLabel, IEmbeddedName } from '../../../types/utils.types';\n\nconst isDevMode = ConfigService.isDevMode();\n\nexport interface FormCreateCustomerProps extends Omit<ModalFormProps<any, any, ICustomerFormData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<ICustomerFormData>;\n  withReferer?: boolean;\n}\n\nconst engagementSourceOptions = enumToFilterOptions(EngagementSource);\nconst FormCreateCustomer: React.FC<FormCreateCustomerProps> = ({ defaultState, withReferer, onSubmit, ...p }) => {\n  const { register, setValue, handleSubmit, watch, ...form } = useForm<ICustomerFormData>({\n    defaultValues: { ...defaultState, businessType: BusinessSubjectTypeEnum.company },\n  });\n  const formValues = watch();\n\n  const isEditMode = useMemo(() => !!defaultState?.email, [defaultState?.email]);\n\n  const onValid = (fData: ICustomerFormData) => {\n    onSubmit && onSubmit(_.omit(fData, isEditMode ? ['engagementSource', 'email'] : ['engagementSource']));\n  };\n\n  return (\n    <ModalForm fillHeight {...p} title={p.title ? p.title : t('Create customer')} onSubmit={handleSubmit(onValid)}>\n      <Inputs padding={'0 8px 8px'}>\n        <InputLabel label={t('type')} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            onSelect={info => {\n              setValue('businessType', info?.value);\n            }}\n          />\n        </InputLabel>\n\n        {formValues.businessType !== BusinessSubjectTypeEnum.person && (\n          <FormCustomerLabelInputs form={{ register, setValue, handleSubmit, watch, ...form }} />\n        )}\n\n        {formValues.businessType !== BusinessSubjectTypeEnum.company && (\n          <FormCustomerNameInputs form={{ register, setValue, handleSubmit, watch, ...form }} />\n        )}\n\n        <InputLabel label={t('email')} disabled={isEditMode} required>\n          <InputText\n            placeholder={t('email')}\n            type={'email'}\n            {...register('email', { required: true })}\n            disabled={isEditMode}\n            required\n          />\n        </InputLabel>\n\n        <InputLabel label={t('phone')}>\n          <InputText placeholder={t('phone')} {...register('phone')} />\n        </InputLabel>\n\n        {formValues.businessType !== BusinessSubjectTypeEnum.company && (\n          <InputLabel label={t('Birth date')}>\n            <InputText placeholder={t('Birth date')} {...register('birthDate')} type={'datetime-local'} />\n          </InputLabel>\n        )}\n\n        {withReferer && isDevMode && (\n          <InputLabel label={t('Referrer id')}>\n            <InputText placeholder={t('Referrer id')} {...register('referrer._id')} />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('Source')}>\n          <CheckboxesListSelector\n            disabled\n            options={engagementSourceOptions}\n            currentOption={{ value: formValues?.engagementSource }}\n            onChangeIndex={i => {\n              setValue('engagementSource', engagementSourceOptions[i].value);\n            }}\n          />\n        </InputLabel>\n\n        {formValues?.engagementSource === EngagementSource.referralSystem && (\n          <FlexBox gap={8} fillWidth>\n            <InputLabel label={t('Referrer')} required>\n              <InputText placeholder={t('Referrer')} type={'email'} required />\n            </InputLabel>\n\n            <FlexBox fxDirection={'row'} fillWidth gap={8} padding={'8px 0'}>\n              <ButtonIcon variant={'defaultSmall'}>{t('Clear referrer')}</ButtonIcon>\n              <ButtonIcon variant={'outlinedSmall'} flex={1}>\n                {t('Select referrer')}\n              </ButtonIcon>\n            </FlexBox>\n          </FlexBox>\n        )}\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled(FlexBox)``;\n\nconst FormCustomerNameInputs: React.FC<{ form: UseFormReturn<ICustomerFormData> }> = ({ form }) => {\n  const inputs: { name: keyof IEmbeddedName; label: string; required?: boolean }[] = [\n    { name: 'first', label: t('First name'), required: true },\n    { name: 'second', label: t('Second name') },\n    { name: 'middle', label: t('Middle name') },\n  ];\n\n  return (\n    <>\n      {inputs.map(({ name, label, required }) => {\n        return (\n          <InputLabel key={`name_${name}`} label={label} required={required}>\n            <InputText placeholder={label} {...form.register(`name.${name}`, { required })} required={required} />\n          </InputLabel>\n        );\n      })}\n    </>\n  );\n};\n\nconst FormCustomerLabelInputs: React.FC<{ form: UseFormReturn<ICustomerFormData> }> = ({ form }) => {\n  const inputs: { name: keyof IEmbeddedLabel; label: string; required?: boolean }[] = [\n    { name: 'base', label: t('Label'), required: true },\n    { name: 'print', label: t('Print label') },\n  ];\n\n  return (\n    <>\n      {inputs.map(({ name, label, required }) => {\n        return (\n          <InputLabel key={`name_${name}`} label={label} required={required}>\n            <InputText placeholder={label} {...form.register(`label.${name}`, { required })} required={required} />\n          </InputLabel>\n        );\n      })}\n    </>\n  );\n};\nexport default FormCreateCustomer;\n","import { ChangeEventHandler, useEffect, useRef, useState } from 'react';\nimport FlexBox from './FlexBox';\nimport ButtonIcon from './ButtonIcon';\nimport styled from 'styled-components';\nimport InputText from './Inputs/InputText';\nimport { checks } from '../../utils';\nimport { MaybeNull } from '../../types/utils.types';\n\nconst CountSelectorBase = ({\n  value = 0,\n  onChangeValue,\n  width,\n  height = '18px',\n  disabled,\n  className,\n  autoFocus,\n}: {\n  value?: MaybeNull<number>;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  onChangeValue?: (number: number) => void;\n  height?: string;\n  width?: string;\n  disabled?: boolean;\n  className?: string;\n  autoFocus?: boolean;\n}) => {\n  const [count, setCount] = useState(value ?? 0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handleIncrementChange = (increment: number) => () => {\n    onChangeValue\n      ? onChangeValue(count + increment > 0 ? count + increment : count)\n      : setCount(prev => {\n          return prev + increment ? prev + increment : prev;\n        });\n\n    inputRef.current?.focus();\n  };\n\n  useEffect(() => {\n    if (checks.isNum(value) && value > 0) {\n      setCount(value);\n    }\n  }, [value]);\n\n  return (\n    <FlexBox fxDirection={'row'} gap={4} width={width} alignItems={'center'} height={'min-content'}>\n      <ButtonIcon variant={'onlyIcon'} size={height} icon={'minus'} onClick={handleIncrementChange(-1)} />\n\n      <StInput\n        value={count}\n        disabled={disabled}\n        className={className}\n        ref={inputRef}\n        onChange={({ target: { value } }) => {\n          if (isNaN(Number(value))) return;\n          onChangeValue ? onChangeValue(Number(value)) : setCount(Number(value));\n        }}\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n        // onKeyDown={event => {\n        //   if (event.key === 'Enter') {\n        //     event.preventDefault();\n        //   }\n        // }}\n        autoFocus={autoFocus}\n      />\n\n      <ButtonIcon variant={'onlyIcon'} size={height} icon={'plus'} onClick={handleIncrementChange(1)} />\n    </FlexBox>\n  );\n};\n\nconst StInput = styled(InputText)`\n  flex: 1;\n  width: 100%;\n  height: 100%;\n\n  padding: 0 6px;\n  font-size: 16px;\n  font-weight: 500;\n\n  text-align: center;\n\n  //border: 0;\n  //color: inherit;\n  //background: transparent;\n  //text-align: center;\n  //font-family: inherit;\n  //font-size: inherit;\n  //font-weight: inherit;\n`;\nexport default CountSelectorBase;\n","import { IOrderTempSlot } from '../../../types/orders/orders.types';\nimport FlexBox from '../../atoms/FlexBox';\nimport styled, { useTheme } from 'styled-components';\nimport ButtonIcon from '../../atoms/ButtonIcon';\nimport { useMemo, useState } from 'react';\nimport { OfferImageSlotEntity } from '../../../types/offers/offers.types';\nimport { Text } from '../../atoms/Text';\nimport { t } from '../../../lang';\nimport CountSelectorBase from '../../atoms/CountSelectorBase';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { numberWithSpaces } from '../../../utils';\n\nexport interface OrderSlotOverviewProps {\n  slot?: IOrderTempSlot;\n  index?: number;\n  onSelectPress?: () => void;\n  onRemove?: (id: string) => void;\n  onRemovePress?: () => void;\n  disabled?: boolean;\n  editable?: boolean;\n  onEditPress?: () => void;\n  onUpdate?: (slot: IOrderTempSlot) => void;\n}\n\nconst OrderSlotOverview: React.FC<OrderSlotOverviewProps> = ({\n  slot,\n  onEditPress,\n  disabled,\n  onSelectPress,\n  onRemovePress,\n  onUpdate,\n  editable,\n}) => {\n  // * setFormData\n  const [formData] = useState<IOrderTempSlot | undefined>(slot);\n\n  // const handleUpdateQuantity = useCallback(\n  //   (value: number) => {\n  //     setFormData(prev => {\n  //       if (!prev) return prev;\n  //\n  //       const newData = {\n  //         ...prev,\n  //         quantity: value,\n  //         total: !prev?.in ? prev?.in : value * prev?.in,\n  //       };\n  //       onUpdate && onUpdate(newData);\n  //       return newData;\n  //     });\n  //   },\n  //   [onUpdate]\n  // );\n\n  const imgPreview = useMemo(() => {\n    let images: OfferImageSlotEntity[] = [];\n    if (formData?.product?.images?.length) {\n      images = formData?.product?.images;\n    }\n    if (formData?.variation?.offer?.images?.length) {\n      images = formData?.variation?.offer?.images;\n    }\n    if (formData?.inventory?.offer?.images?.length) {\n      images = formData?.inventory?.offer?.images;\n    }\n    if (formData?.origin?.offer?.images?.length) {\n      images = formData?.origin?.offer?.images;\n    }\n    return images[0]?.img_preview || '';\n  }, [\n    formData?.product?.images,\n    formData?.variation?.offer?.images,\n    formData?.origin?.offer?.images,\n    formData?.inventory?.offer?.images,\n  ]);\n\n  const renderPriceInfo = useMemo(() => {\n    return overviewInputs.map(info => {\n      const value = formData && info.name && formData[info.name];\n\n      const v = value && typeof value === 'object' && 'amount' in value ? value.amount : value;\n\n      return (\n        <FlexBox key={info.name} justifyContent={'flex-start'} fillWidth padding={'4px'} gap={4}>\n          <CardText colorType={'secondary'} $size={10}>\n            {info.label}\n          </CardText>\n\n          <CardText $size={12} $align={'right'} $weight={500}>\n            {numberWithSpaces(v || 0)}\n          </CardText>\n        </FlexBox>\n      );\n    });\n  }, [formData]);\n\n  const renderProperties = useMemo(() => {\n    return slot?.variation?.properties?.map(prop => {\n      return (\n        <FlexBox key={prop?._id} justifyContent={'flex-start'} fillWidth padding={'4px'} gap={4}>\n          <CardText colorType={'secondary'} $size={10}>\n            {prop?.parent?.label}\n          </CardText>\n\n          <Text $size={12} $align={'right'} $weight={500}>\n            {prop?.label}\n          </Text>\n        </FlexBox>\n      );\n    });\n  }, [slot?.variation?.properties]);\n\n  // useEffect(() => {\n  //   console.log('OrderSlotOverview', formData);\n  // }, [formData]);\n  const theme = useTheme();\n\n  return (\n    <Card disabled={disabled}>\n      <FlexBox fillWidth gap={8} fxDirection={'row'}>\n        <LeftSide style={{ borderRight: `1px solid ${theme.modalBorderColor}` }} padding={'0 4px 0 0'}>\n          <ImageBox justifyContent={'flex-start'}>\n            <img src={imgPreview} style={{ objectFit: 'cover', objectPosition: 'center' }} alt={''} width={'100%'} />\n          </ImageBox>\n\n          {!disabled && (\n            <FlexBox maxWidth={'125px'} justifyContent={'space-between'}>\n              {editable && (\n                <InputLabel label={t('quantity')} style={{ width: '100%', marginBottom: 8 }} disabled={disabled}>\n                  <CountSelectorBase\n                    // onChangeValue={handleUpdateQuantity}\n                    value={formData?.quantity}\n                    disabled={disabled}\n                  />\n                </InputLabel>\n              )}\n\n              <Buttons>\n                {onRemovePress && (\n                  <ActionButton variant={'textExtraSmall'} disabled={!onRemovePress} onClick={onRemovePress}>\n                    {t('Delete')}\n                  </ActionButton>\n                )}\n\n                {onSelectPress && (\n                  <ActionButton variant={'textExtraSmall'} disabled={!onSelectPress} onClick={onSelectPress}>\n                    {t('Select')}\n                  </ActionButton>\n                )}\n\n                {onEditPress && (\n                  <ActionButton variant={'textExtraSmall'} disabled={!onEditPress} onClick={onEditPress}>\n                    {t('Edit')}\n                  </ActionButton>\n                )}\n              </Buttons>\n            </FlexBox>\n          )}\n        </LeftSide>\n\n        <FlexBox flex={1} gap={2}>\n          <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'flex-start'}>\n            <FlexBox fxDirection={'row'} flexWrap={'wrap'} gap={8} flex={1} alignItems={'center'} padding={'4px 8px'}>\n              <CardText style={{ flex: 1 }}>{slot?.variation?.label}</CardText>\n\n              <CardText $size={12} colorType={'secondary'}>\n                {slot?.variation?.sku}\n              </CardText>\n\n              <CardText $size={12} colorType={'secondary'}>\n                {slot?.product?.type}\n              </CardText>\n            </FlexBox>\n          </FlexBox>\n\n          <Text $size={12} $weight={600}>\n            {t('Properties')}\n          </Text>\n          <Properties fillWidth alignItems={'flex-start'}>\n            {renderProperties}\n          </Properties>\n\n          <Text $size={12} $weight={600}>\n            {t('Summary')}\n          </Text>\n          <CardGridArea fillWidth alignItems={'flex-start'} justifyContent={'space-between'}>\n            {renderPriceInfo}\n          </CardGridArea>\n        </FlexBox>\n      </FlexBox>\n    </Card>\n  );\n};\nconst Card = styled(FlexBox)<{ isSelected?: boolean; disabled?: boolean }>`\n  position: relative;\n  //height: fit-content;\n  padding: 4px;\n\n  //height: min-content;\n\n  //border-bottom: 2px solid ${({ theme }) => theme.fieldBackgroundColor};\n  color: ${({ theme }) => theme.fontColorSidebar};\n  cursor: default;\n\n  border: 1px solid ${({ theme }) => theme.modalBorderColor};\n  border-left: 3px solid ${({ theme }) => theme.modalBorderColor};\n\n  transition: all ${({ theme }) => theme.globals.timingFunctionMain};\n\n  &:hover {\n    border-color: ${({ disabled, theme }) => !disabled && theme.accentColor.base};\n  }\n`;\nconst LeftSide = styled(FlexBox)`\n  width: min-content;\n  @media screen and (min-width: 768px) {\n    width: max-content;\n    flex-direction: row;\n    gap: 8px;\n  }\n`;\nconst CardGridArea = styled(FlexBox)`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));\n  //grid-template-rows: repeat(5, min-content);\n  //grid-template-areas:\n  //  'label label label label sku sku'\n  //  'price bonus discount bonus cashback total';\n  //'category category brand brand type type'\n  //'atr_1 atr_1  atr_2  atr_2 qty qty'\n  //'warehouse warehouse warehouse warehouse warehouse warehouse';\n\n  //max-width: 270px;\n  height: max-content;\n  border-top: 1px solid ${({ theme }) => theme.modalBorderColor};\n  border-bottom: 1px solid ${({ theme }) => theme.modalBorderColor};\n`;\nconst Properties = styled(CardGridArea)`\n  grid-template-columns: repeat(auto-fill, minmax(125px, 1fr));\n`;\n\nconst ImageBox = styled(FlexBox)`\n  //height: fit-content;\n\n  //width: 100%;\n  object-position: center;\n  object-fit: contain;\n  overflow: hidden;\n  width: 100%;\n  max-width: 125px;\n  //max-height: 100px;\n  //height: 100px;\n\n  //@media screen and (max-width: 480px) {\n  //  width: 100px;\n  //  margin: auto;\n  //}\n`;\n\nconst CardText = styled(Text)<{ colorType?: 'secondary' | 'primary' }>`\n  color: ${({ theme, colorType }) =>\n    colorType === 'secondary' ? theme.globals.inputPlaceholderColor : theme.fontColorSidebar};\n`;\nconst ActionButton = styled(ButtonIcon)`\n  padding: 6px 10px;\n`;\nconst Buttons = styled(FlexBox)`\n  //border-top: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nexport default OrderSlotOverview;\n\nconst overviewInputs: {\n  name?: keyof IOrderTempSlot;\n  label?: string;\n  value?: React.ReactNode;\n  borderBottom?: boolean;\n}[] = [\n  { label: t('Price'), name: 'out' },\n  // { label: t('Bonus'), name: 'bonus' },\n  // { label: t('Cashback'), name: 'cashback' },\n  // { label: t('Discount'), name: 'discount' },\n  // { label: t('Total amount'), name: 'total' },\n];\n","import { FilterOption } from './TabSelector';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { checks } from '../../utils';\nimport FlexBox from './FlexBox';\nimport CheckBox from '../TableList/TebleCells/CellComponents/CheckBox';\nimport { Text } from './Text';\n\nexport interface CheckboxesListOption<V = any> extends Partial<FilterOption<V>> {\n  description?: string;\n}\n\nexport type CheckboxesListOnChangeHandler = (ids: string[]) => void;\n\nconst CheckboxesListSelector = <Option = any, V = any>({\n  options,\n  onChangeIndex,\n  currentIndex,\n  currentOption,\n  multiple,\n  onChange,\n  value,\n  disabled,\n  disabledCheck,\n  renderLabel,\n}: {\n  onChangeIndex?: (index: number) => void;\n  onChange?: CheckboxesListOnChangeHandler;\n  options?: (Option & CheckboxesListOption<V>)[];\n  currentIndex?: number;\n  currentOption?: CheckboxesListOption<V>;\n  value?: string[];\n  multiple?: boolean;\n  disabled?: boolean;\n  renderLabel?:\n    | null\n    | ((info: { option: Option & CheckboxesListOption<V>; index: number; checked?: boolean }) => React.ReactNode);\n  disabledCheck?: (option: Option & CheckboxesListOption<V>, index: number) => boolean;\n}) => {\n  const [current, setCurrent] = useState(0);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const handleSelect = useCallback(\n    (id: string) => {\n      if (multiple) {\n        setSelectedIds(p => {\n          const newValue = selectedIds.includes(id) ? p.filter(el => el !== id) : [...p, id];\n          onChange && onChange(newValue);\n          return newValue;\n        });\n      } else {\n        setSelectedIds([id]);\n        onChange && onChange([id]);\n      }\n    },\n    [multiple, onChange, selectedIds]\n  );\n  const handleSetCurrent = useCallback(\n    (idx: number) => {\n      if (onChangeIndex) {\n        onChangeIndex(idx);\n      } else {\n        setCurrent(idx);\n      }\n    },\n    [onChangeIndex]\n  );\n\n  const renderOptions = useMemo(() => {\n    return options?.map((o, idx) => {\n      const isDisabled = disabledCheck ? disabledCheck(o, idx) : disabled;\n\n      return (\n        <FlexBox\n          key={`m-opt_${o.value}`}\n          fxDirection={'row'}\n          gap={8}\n          padding={'2px 4px'}\n          alignItems={'center'}\n          style={{ opacity: isDisabled ? 0.7 : 1, pointerEvents: isDisabled ? 'none' : 'all' }}\n          onClick={() => {\n            if (isDisabled) return;\n            handleSetCurrent(idx);\n            o?._id && handleSelect(o?._id);\n          }}\n        >\n          <CheckBox\n            checked={(o?._id && selectedIds.includes(o?._id)) || idx === current}\n            size={'22px'}\n            disabled={isDisabled}\n          />\n\n          {renderLabel ? (\n            renderLabel({\n              option: o,\n              index: idx,\n              checked: (o?._id && selectedIds.includes(o?._id)) || idx === current,\n            })\n          ) : (\n            <Text>{o?.label}</Text>\n          )}\n        </FlexBox>\n      );\n    });\n  }, [current, disabled, disabledCheck, handleSelect, handleSetCurrent, options, renderLabel, selectedIds]);\n\n  useEffect(() => {\n    if (!checks.isUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    if (multiple) return;\n    if (!checks.isUnd(currentOption) && !checks.isUnd(options)) {\n      setCurrent(options.findIndex(o => o?.value === currentOption?.value || o?._id === currentOption?._id));\n    }\n  }, [currentOption, multiple, options]);\n\n  useEffect(() => {\n    if (!multiple) return;\n    if (!checks.isUnd(value) && checks.isArray(value)) {\n      setSelectedIds(value);\n    }\n  }, [multiple, value]);\n  return (\n    <FlexBox fillWidth gap={8}>\n      {renderOptions}\n    </FlexBox>\n  );\n};\n\nexport default CheckboxesListSelector;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { FilterOption } from './TabSelector';\nimport ButtonIcon from './ButtonIcon';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { checks } from '../../utils';\nimport { t } from '../../lang';\nimport { useMediaQuery } from 'react-responsive';\nimport { MaybeNull } from '../../types/utils.types';\n\nexport type StepChangeEvent<V = any, D = any> = {\n  option: FilterOption<V, D>;\n  value: V;\n  index: number;\n  name?: string;\n};\nexport type StepChangeHandler<V = any, D = any> = (event: StepChangeEvent<V, D>) => void;\nexport interface StepsControllerProps<V = any> {\n  steps?: FilterOption<V>[];\n  currentIndex?: number;\n  onNextPress?: StepChangeHandler<V>;\n  onPrevPress?: StepChangeHandler<V>;\n\n  onCancelPress?: () => void;\n  onAcceptPress?: () => void;\n\n  canGoNext?: boolean;\n  canAccept?: boolean;\n  canSubmit?: boolean;\n\n  isLoading?: boolean;\n\n  cancelButton?: boolean;\n  submitButton?: boolean;\n  acceptButton?: boolean;\n  arrowButtons?: boolean;\n}\n\nconst StepsController = <V = any,>({\n  steps,\n  currentIndex = 0,\n  onNextPress,\n  onPrevPress,\n  onCancelPress,\n  onAcceptPress,\n  canGoNext = true,\n  canAccept,\n  canSubmit,\n  cancelButton = true,\n  submitButton = false,\n  acceptButton,\n  arrowButtons = true,\n  isLoading,\n}: StepsControllerProps<V>) => {\n  const isTablet = useMediaQuery({ query: '(max-width: 768px)' });\n  const isMobile = useMediaQuery({ query: '(max-width: 480px)' });\n  const [current, setCurrent] = useState<number>(currentIndex);\n\n  const prevData = useMemo((): { label?: MaybeNull<string>; value: V } | null => {\n    if (!steps) return null;\n    return steps[current - 1] ? { label: steps[current - 1]?.label, value: steps[current - 1]?.value } : null;\n  }, [current, steps]);\n  const nextData = useMemo((): { label?: MaybeNull<string>; value: V } | null => {\n    if (!steps) return null;\n\n    return steps[current + 1] ? { label: steps[current + 1]?.label, value: steps[current + 1]?.value } : null;\n  }, [current, steps]);\n\n  const handlePrevPress = useCallback(() => {\n    if (steps) {\n      if (onPrevPress) {\n        if (current === 0) {\n          onCancelPress && onCancelPress();\n          return;\n        } else {\n          const newValue = current - 1;\n          onPrevPress && onPrevPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          if (prev === 0) {\n            return prev;\n          } else {\n            return prev - 1;\n          }\n        });\n      }\n    }\n  }, [current, onCancelPress, onPrevPress, steps]);\n\n  const handleNextPress = useCallback(() => {\n    if (steps) {\n      if (onNextPress) {\n        const newValue = current + 1;\n        if (newValue === steps.length) {\n          return onAcceptPress && onAcceptPress();\n        } else {\n          return onNextPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          return prev + 1 === steps.length ? prev + 1 : prev;\n        });\n      }\n    }\n  }, [current, onAcceptPress, onNextPress, steps]);\n\n  useEffect(() => {\n    if (checks.isNotUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  return (\n    <Container fxDirection={'row'} gap={8} fillWidth>\n      {cancelButton && !isTablet && (\n        <ActionButton variant={'defaultSmall'} isLoading={isLoading} onClick={onCancelPress}>\n          {t('Cancel')}\n        </ActionButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          icon={'SmallArrowLeft'}\n          onClick={handlePrevPress}\n          disabled={isLoading || !prevData}\n        >\n          {prevData?.label}\n        </ArrowButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          endIcon={'SmallArrowRight'}\n          onClick={handleNextPress}\n          disabled={isLoading || !canGoNext || !nextData}\n        >\n          {nextData?.label}\n        </ArrowButton>\n      )}\n\n      {(submitButton || acceptButton) && (\n        <ActionButton\n          variant={'filledSmall'}\n          type={canSubmit && submitButton ? 'submit' : 'button'}\n          onClick={onAcceptPress}\n          isLoading={isLoading}\n          disabled={canSubmit && submitButton ? !canSubmit : !canAccept}\n        >\n          {t('Accept')}\n        </ActionButton>\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  //min-height: 44px;\n  // border-top: 1px solid ${({ theme }) => theme.modalBorderColor};\n  // border-bottom: 1px solid ${({ theme }) => theme.modalBorderColor};\n`;\nconst ActionButton = styled(ButtonIcon)`\n  padding-top: 0;\n  padding-bottom: 0;\n\n  flex: 1;\n\n  min-width: min-content;\n  height: 100%;\n`;\nconst ArrowButton = styled(ButtonIcon)`\n  min-width: 34px;\n  height: 100%;\n  // color: ${p => p.theme.accentColor.base};\n  // fill: ${p => p.theme.accentColor.base};\n  // background-color: ${p => p.theme.accentColor.light};\n  @media screen and (min-width: 480px) {\n    flex: 1;\n  }\n`;\nexport default StepsController;\n","import ButtonIcon from './ButtonIcon';\nimport FlexBox from './FlexBox';\nimport { Text } from './Text';\nimport styled from 'styled-components';\nimport { t } from '../../lang';\nimport { isUndefined } from 'lodash';\n\nexport const DefaultContent: React.FC<{ content?: string }> = ({ content } = {}) => {\n  return <div>{`Default content: ${content}`}</div>;\n};\nexport const ErrorContent: React.FC<{ error?: string }> = ({ error } = {}) => {\n  return <div>{`Error: ${error}`}</div>;\n};\n\nexport const ModalHeader = ({\n  onClose,\n  onBackPress,\n  title,\n  showSubmitButton,\n  canSubmit,\n  renderTitle,\n  ...props\n}: {\n  canSubmit?: boolean;\n  onBackPress?: () => void;\n  onClose?: () => void;\n  title?: string;\n  showSubmitButton?: boolean;\n  renderTitle?: React.ReactNode;\n}) => {\n  return (\n    <Header padding={'4px 0'} {...props} gap={8}>\n      <FlexBox fillWidth fxDirection={'row'} justifyContent={'space-between'} alignItems={'stretch'} height={'32px'}>\n        {onBackPress && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            icon={'SmallArrowLeft'}\n            iconSize={'22px'}\n            padding={'0'}\n            style={{ minWidth: 'max-content', minHeight: '100%' }}\n            onClick={onBackPress || onClose}\n          >\n            {t('Back')}\n          </ButtonIcon>\n        )}\n\n        {renderTitle || (\n          <FlexBox justifyContent={'center'} overflow={'hidden'}>\n            <Text\n              $weight={600}\n              $size={14}\n              style={{ textTransform: 'uppercase', textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }}\n            >\n              {title}\n            </Text>\n          </FlexBox>\n        )}\n\n        {showSubmitButton && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            gap={'6px'}\n            type={showSubmitButton ? 'submit' : 'button'}\n            padding={'0 6px'}\n            endIcon={'done'}\n            endIconSize={'22px'}\n            style={{ minWidth: 'max-content', minHeight: '100%' }}\n            disabled={!canSubmit}\n          >\n            {'Ok'}\n          </ButtonIcon>\n        )}\n\n        {onClose && (\n          <ButtonIcon\n            variant={'onlyIconNoEffects'}\n            icon={'close'}\n            iconSize={'95%'}\n            size={'24px'}\n            padding={'0'}\n            onClick={onClose}\n          ></ButtonIcon>\n        )}\n      </FlexBox>\n    </Header>\n  );\n};\n\nconst Header = styled(FlexBox)`\n  height: 32px;\n`;\n\nexport const DrawerFooter = ({\n  submitButtonText = 'Прийняти',\n  loading,\n  extraFooter,\n  canSubmit,\n  onCreatePress,\n  resetButtonShown,\n  onAcceptPress,\n  canAccept,\n}: {\n  onAcceptPress?: () => void;\n  canSubmit?: boolean;\n  canAccept?: boolean;\n  resetButtonShown?: boolean;\n  extraFooter?: React.ReactNode;\n  loading?: boolean;\n  onCreatePress?: () => void;\n  submitButtonText?: string;\n}) => {\n  return (\n    <Footer fillWidth>\n      {extraFooter}\n\n      <FlexBox padding={'8px 8px'} fxDirection={'row'} gap={8} alignItems={'center'}>\n        {resetButtonShown && (\n          <ButtonIcon variant={'onlyIcon'} icon={'clear'} size={'36px'} iconSize={'80%'} type={'reset'} />\n        )}\n\n        {onCreatePress && (\n          <ButtonIcon variant={'onlyIcon'} icon={'plus'} size={'36px'} iconSize={'80%'} onClick={onCreatePress} />\n        )}\n\n        <ButtonIcon\n          variant={'filledMiddle'}\n          flex={1}\n          type={isUndefined(canSubmit) ? 'button' : 'submit'}\n          style={{ padding: '0 12px' }}\n          textTransform={'uppercase'}\n          fontWeight={600}\n          endIcon={'SmallArrowRight'}\n          endIconSize={'24px'}\n          disabled={isUndefined(canSubmit) ? !canAccept : !canSubmit}\n          isLoading={loading}\n          onClick={onAcceptPress}\n        >\n          {submitButtonText}\n        </ButtonIcon>\n      </FlexBox>\n    </Footer>\n  );\n};\n\nconst Footer = styled(FlexBox)``;\n\nexport const OverlayForm = ({\n  children,\n  ...props\n}: { children?: React.ReactNode } & React.HTMLAttributes<HTMLFormElement>) => {\n  return <Form {...props}>{children}</Form>;\n};\n\nconst Form = styled.form`\n  flex: 1;\n\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  max-width: 480px;\n\n  padding: 0 8px;\n\n  background-color: ${p => p.theme.modalBackgroundColor};\n`;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { CustomerEntity } from '../types/customers.types';\nimport { t } from '../lang';\n\nexport const customersColumns: CellTittleProps<CustomerEntity>[] = [\n  {\n    top: {\n      name: `${t('label')}/${t('name')}`,\n      getData: d => {\n        const entry = d.label ?? d.name;\n\n        return entry\n          ? Object.values(entry)\n              .map(value => value ?? '')\n              .join(' ')\n          : '---';\n      },\n    },\n    bottom: { name: 'ІПН/ЄДРПОУ', getData: d => (d.taxCode?.personal || '---') + '/' + (d.taxCode?.corp || '---') },\n    width: '240px',\n    action: 'doubleDataWithAvatar',\n  },\n  {\n    top: { name: 'Тип', getData: d => d?.type },\n    bottom: { name: 'Статус', path: 'status' },\n    width: '120px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Емейл', path: 'email', uppercase: false },\n    bottom: { name: 'Телефон', path: 'phone' },\n    width: '170px',\n    action: 'contacts',\n  },\n  {\n    top: { name: 'Локація' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Теги', path: 'tags' },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: 'Коментар', path: 'description' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateSimple',\n  },\n];\n"],"names":["Container","styled","FlexBox","_templateObject","_taggedTemplateLiteral","_ref2","theme","trBorderClr","_ref3","globals","timingFnMain","_ref4","Header","_templateObject2","_ref5","_ref6","modalBackgroundColor","ContentBox","_templateObject3","_ref7","StButton","ButtonIcon","_templateObject4","_ref8","accentColor","base","_ref","children","_ref$maxHeight","maxHeight","renderHeader","renderFooter","_ref$toggled","toggled","_ref$open","open","disabled","contentContainerStyle","_ref$activeBackground","activeBackgroundColor","className","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","useEffect","isBoolean","_jsxs","style","fillWidth","fxDirection","alignItems","justifyContent","_jsx","icon","undefined","iconSize","variant","onClick","prev","t","_objectSpread","padding","overflow","StAccordionItem","FormAccordionItem","slots","onRemove","onUpdate","title","onAddSlotPress","useTheme","renderSlots","useMemo","map","slot","OrderSlotOverview","editable","onRemovePress","tempId","concat","renderHeaderComp","fillHeight","gap","Text","$weight","$size","height","border","modalBorderColor","minWidth","fontWeight","_Fragment","p","fontColorSidebar","Content","Buttons","onChangeValidStatus","modalS","useModalService","service","useAppServiceProvider","AppModuleName","useOrdersSelector","ordersGroupFormData","isMobile","useMediaQuery","maxWidth","handelAddSlot","useCallback","addTempSlot","handelRemoveSlot","id","removeTempSlot","handelUpdateSlot","updateTempSlot","groupedData","_slot$warehouse","_map$slot$warehouse$_","_map$slot$warehouse$_2","warehouse","_id","_toConsumableArray","length","renderGroupedData","Object","keys","k","i","_v$warehouse","_v$warehouse2","v","OrderGroupItem","label","m","Modal","Modals","props","params","getIdRef","onSubmit","d","onClose","flex","position","window","confirm","ToastService","onSelect","asReceiver","_objectWithoutProperties","_excluded","customers","useCustomersSelector","ServiceName","tableConfigs","tableData","tableTitles","customersColumns","actionsCreator","_ctx","getAll","separator","ModalChildren","FormCreateCustomer","modalChildrenProps","create","data","toReqData","onSuccess","onRowClick","rowData","refresh","ModalForm","TableList","_permission$company3","_usePermissionsSelect","usePermissionsSelector","users","permission","isLoading","filter","el","integration","res","find","pr","rowId","ctx","name","_permission$company","_permission$company2","company","getAllByCompanyId","recipient","PermissionRecipientEnum","usersDirColumns","hasSearch","isReceiver","customerS","size","info","isManager","renderCells","getValue","_info$label","visible","_info$name","first","_info$name2","middle","_info$name3","second","email","_info$taxCode","taxCode","corp","_info$taxCode2","personal","_info$tags","tags","join","getCustomerInfoComponentCells","$align","flexWrap","destinationAddressInputsProps","required","throttleCallback","_","_console","_len","arguments","args","Array","_key","console","log","apply","fn","addDays","dirtyDate","dirtyAmount","requiredArgs","date","toDate","amount","toInteger","isNaN","Date","NaN","setDate","getDate","AccordionItemTitle","$padding","$ellipsisMode","Inputs","BorderedBox","_formValues$deliveryI","_formValues$shipmentI","_formValues$manager","_formValues$communica","_formValues$communica2","_formValues$communica3","_formValues$communica4","_formValues$communica5","_formValues$communica6","_formValues$deliveryI2","_formValues$deliveryI3","_formValues$deliveryI4","_useOrderInfoForm","useFormContext","_useOrderInfoForm$for","formState","isValid","errors","register","setValue","unregister","watch","trigger","PaymentInternalTypeEnum","formValues","deliveryMethodsList","useTranslatedMethodsList","useDeliveriesSelector","methods","withFullLabel","communicationMethodsList","useCommunicationSelector","invoicingMethods","useInvoicesSelector","_useState3","hasDelivery","deliveryInfo","hasDeliveryInvoice","invoiceInfo","hasReceiverInfo","receiver","hasExecuteDate","shipmentInfo","executeAt","_useState4","confirms","setConfirms","handleOnChangeValue","path","value","shouldTouch","then","catch","e","error","registerConfirmSelectHandler","_defineProperty","fns","toInputValueDate","registerSwitch","onChange","width","margin","manager","InputLabel","CustomerInfoComponent","user","SelectManagerModal","customer","TagButtonsFilter","numColumns","communication","resetButtonLabel","options","resetButtonPosition","CreateCustomerButtonIcon","SelectCustomerModal","ButtonSwitch","rejectLabel","acceptLabel","mtd","InputText","placeholder","type","CheckboxesListSelector","currentOption","method","onChangeIndex","columnGap","display","gridTemplateColumns","_errors$deliveryInfo","_errors$deliveryInfo2","destination","FormCreateOrdersGroupStepsEnum","steps","enumToFilterOptions","stepsProcessInitialState","_stepsProcessInitialS","Stuffing","Info","Form","Footer","_currentGroupFormStat","_currentGroupFormStat2","_currentGroupFormStat3","_currentGroupFormStat4","currentGroupFormState","isSubmitting","setIsSubmitting","_useStepsHandler","useStepsHandler","stepsMap","stepIdx","setNextStep","setPrevStep","getCurrentStep","isLast","isStepFinished","setIsStepFinished","handleValidStatus","formOrderInfo","useForm","defaultValues","expireAt","resolver","yupResolver","orderInfoBaseSchema","reValidateMode","handleSubmit","orderInfoFormValues","renderStep","OrderGroupsStuffingStep","OrderInfoStep","isGroup","canGoNext","FormProvider","apiCall","OrdersApi","toOrderInfoReqData","omitPathArr","toOrderSlotsReqData","onLoading","logError","logResData","onErrorSubmit","ModalHeader","onBackPress","TabSelector","asStepper","currentIndex","optionProps","fitContentH","StepsController","onNextPress","updateCurrentGroupFormInfoData","toUpperCase","onPrevPress","canSubmit","submitButton","onCancelPress","EngagementSource","isDevMode","ConfigService","engagementSourceOptions","FormCustomerNameInputs","form","inputs","FormCustomerLabelInputs","defaultState","withReferer","_useForm","businessType","BusinessSubjectTypeEnum","_excluded2","isEditMode","fData","ButtonsGroup","businessSubjectTypeFilterOptions","engagementSource","referralSystem","StInput","_ref$value","onChangeValue","_ref$height","autoFocus","count","setCount","inputRef","useRef","handleIncrementChange","increment","_inputRef$current","current","focus","checks","ref","target","Number","preventDefault","Card","fieldBackgroundColor","timingFunctionMain","LeftSide","CardGridArea","_ref9","Properties","ImageBox","_templateObject5","CardText","_templateObject6","_ref10","colorType","inputPlaceholderColor","ActionButton","_templateObject7","_templateObject8","_formData$product3","_formData$variation3","_formData$variation3$","_formData$origin3","_formData$origin3$off","_formData$inventory3","_formData$inventory3$","_slot$variation2","_slot$variation3","_slot$variation4","_slot$product","onEditPress","onSelectPress","formData","imgPreview","_formData$product","_formData$product$ima","_formData$variation","_formData$variation$o","_formData$variation$o2","_formData$inventory","_formData$inventory$o","_formData$inventory$o2","_formData$origin","_formData$origin$offe","_formData$origin$offe2","_images$","_formData$product2","_formData$variation2","_formData$variation2$","_formData$inventory2","_formData$inventory2$","_formData$origin2","_formData$origin2$off","images","product","variation","offer","inventory","origin","img_preview","renderPriceInfo","overviewInputs","numberWithSpaces","renderProperties","_slot$variation","_slot$variation$prope","properties","prop","_prop$parent","parent","borderRight","src","objectFit","objectPosition","alt","marginBottom","CountSelectorBase","quantity","sku","multiple","disabledCheck","renderLabel","setCurrent","selectedIds","setSelectedIds","handleSelect","newValue","includes","handleSetCurrent","idx","renderOptions","o","isDisabled","opacity","pointerEvents","CheckBox","checked","option","index","findIndex","ArrowButton","light","_ref$currentIndex","onAcceptPress","_ref$canGoNext","canAccept","_ref$cancelButton","cancelButton","_ref$submitButton","acceptButton","_ref$arrowButtons","arrowButtons","isTablet","query","prevData","_steps","_steps2","nextData","_steps3","_steps4","handlePrevPress","handleNextPress","endIcon","ErrorContent","showSubmitButton","renderTitle","minHeight","textTransform","textOverflow","whiteSpace","endIconSize","DrawerFooter","_ref4$submitButtonTex","submitButtonText","loading","extraFooter","onCreatePress","resetButtonShown","isUndefined","top","getData","_d$label","entry","values","bottom","_d$taxCode","_d$taxCode2","action","uppercase","align"],"sourceRoot":""}