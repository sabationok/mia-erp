{"version":3,"file":"static/js/427.e9b0561d.chunk.js","mappings":"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","sources":["components/Forms/Company/FormCreateCompany.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { BusinessSubjectTypeEnum, ICompanyFormData } from '../../../types/companies/companies.types';\nimport { ModalFormProps } from '../../ModalForm';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\nimport { t } from '../../../i18e';\nimport { useAppForm } from '../../../hooks';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect';\nimport { businessSubjectTypeFilterOptions, ownershipTypeFilterOptions } from '../../../data/companies.data';\nimport { ContractorsTypesEnum } from '../../../redux/directories/contractors.types';\nimport { FormInputs } from '../components/atoms';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { toReqData } from '../../../utils';\nimport { ToastService } from '../../../services';\nimport { AppFormProvider, useAppFormProvider } from '../../../hooks/useAppForm.hook';\nimport { HasEmbeddedLabel, HasEmbeddedName } from '../../../types/utils.types';\nimport { FlexForm } from '../../atoms/FlexBox';\nimport ModalBase from '../../atoms/Modal';\nimport ModalFooter from '../../atoms/Modal/ModalFooter';\n\nexport interface FormCreateCompanyProps extends ModalFormProps<any, any, ICompanyFormData> {}\nconst FormCreateCompany: React.FC<FormCreateCompanyProps> = ({ defaultState, id, title, onClose, ...props }) => {\n  const pServ = useAppServiceProvider()[AppModuleName.permissions];\n  const [isLoading, setIsLoading] = useState(false);\n  const formMethods = useAppForm<ICompanyFormData>({\n    defaultValues: { businessSubjectType: BusinessSubjectTypeEnum.company, ...defaultState },\n    reValidateMode: 'onBlur',\n    // resolver: yupResolver(createCompanyFormSchema),\n    shouldUnregister: true,\n  });\n  const {\n    register,\n    unregister,\n    formState: { errors },\n    handleSubmit,\n    formValues: { businessSubjectType, type: currentType, ...formValues },\n    registerSelect,\n    setValue,\n  } = formMethods;\n\n  const formRenderConfig = useMemo(\n    () => ({\n      renderOwnershipTypeSelect: businessSubjectType === BusinessSubjectTypeEnum.company,\n      renderLabelInput:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderNamesInputs:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderPersonalTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderAttractionSourceSelect: currentType === ContractorsTypesEnum.CUSTOMER,\n    }),\n    [currentType, businessSubjectType]\n  );\n\n  function onValid(fData: ICompanyFormData) {\n    console.log({ formValues });\n\n    pServ\n      .createCompany({\n        data: toReqData(fData),\n        onSuccess(data) {\n          console.log('Company created', data);\n          ToastService.success(`Company created: ${data?.name || data?.label}`);\n          onClose && onClose();\n        },\n        onError() {\n          ToastService.error('Error');\n        },\n        onLoading: setIsLoading,\n      })\n      .then();\n  }\n\n  return (\n    <ModalBase onClose={onClose} fillHeight width={'480px'} title={title}>\n      <FlexForm\n        fillHeight\n        {...props}\n        onSubmit={handleSubmit(onValid, errors => {\n          console.error('[Form Create Company]', errors);\n        })}\n      >\n        {/*<ModalHeader title={title} onClose={onClose} />*/}\n\n        <AppFormProvider value={formMethods}>\n          <FormInputs flex={1} fillWidth padding={'8px 4px'} overflow={'auto'}>\n            <InputLabel label={t('businessSubjectType')} error={errors.businessSubjectType} required>\n              <ButtonsGroup\n                options={businessSubjectTypeFilterOptions}\n                currentOption={{ value: businessSubjectType }}\n                onSelect={({ value }) => {\n                  setValue('businessSubjectType', value);\n                  if (value !== BusinessSubjectTypeEnum.company) {\n                    unregister('ownershipType');\n                  }\n                }}\n              />\n            </InputLabel>\n\n            {formRenderConfig.renderNamesInputs && <NameInputs />}\n\n            {formRenderConfig.renderLabelInput && <LabelInputs />}\n\n            <InputLabel label={'Емейл (основний)'} error={errors.email} required>\n              <InputText placeholder={'Введіть основний емейл'} {...register('email')} type={'email'} required />\n            </InputLabel>\n\n            <InputLabel label={'Телефон (основний)'} error={errors.phone} required>\n              <InputText placeholder={'Введіть осний контактний номер'} {...register('phone')} />\n            </InputLabel>\n\n            {formRenderConfig.renderOwnershipTypeSelect && (\n              <CustomSelect\n                {...registerSelect('ownershipType', {\n                  options: ownershipTypeFilterOptions,\n                  label: 'Форма власності',\n                  placeholder: 'Оберіть форму власності компанії',\n                })}\n              />\n            )}\n\n            {formRenderConfig.renderTaxCode && (\n              <InputLabel label={t('taxCode')} error={errors.taxCode}>\n                <InputText placeholder={t('taxCode')} {...register('taxCode')} />\n              </InputLabel>\n            )}\n\n            {formRenderConfig.renderPersonalTaxCode && (\n              <InputLabel label={t('personalTaxCode')} error={errors.taxCode}>\n                <InputText placeholder={t('personalTaxCode')} {...register('personalTaxCode')} />\n              </InputLabel>\n            )}\n          </FormInputs>\n        </AppFormProvider>\n      </FlexForm>\n\n      <ModalFooter canSubmit isLoading={isLoading} />\n    </ModalBase>\n  );\n};\n\nconst LabelInputs = (props: { autoFocus?: boolean }) => {\n  const {\n    register,\n    formState: { errors },\n  } = useAppFormProvider<HasEmbeddedLabel>();\n\n  return (\n    <>\n      <InputLabel label={t('Label')} error={errors.label?.base} required={true}>\n        <InputText placeholder={t('insertLabel')} {...register('label.base')} required={true} autoFocus={true} />\n      </InputLabel>\n\n      <InputLabel label={t('Print label')} error={errors.label?.print}>\n        <InputText placeholder={t('Enter print label')} {...register('label.print')} />\n      </InputLabel>\n    </>\n  );\n};\n\nconst NameInputs = (props: { autoFocus?: boolean }) => {\n  const {\n    register,\n    formState: { errors },\n  } = useAppFormProvider<HasEmbeddedName>();\n\n  return (\n    <>\n      <InputLabel label={t('name')} error={errors.name?.first} required>\n        <InputText\n          placeholder={t('Insert first name')}\n          {...register('name.first')}\n          required\n          autoFocus={props.autoFocus}\n        />\n      </InputLabel>\n\n      <InputLabel label={t('secondName')} error={errors?.name?.second}>\n        <InputText placeholder={t('insertSecondName')} {...register('name.second')} />\n      </InputLabel>\n\n      <InputLabel label={t('Middle name')} error={errors?.name?.middle}>\n        <InputText placeholder={t('Insert middle name')} {...register('name.middle')} />\n      </InputLabel>\n    </>\n  );\n};\n\nexport default FormCreateCompany;\n"],"names":["LabelInputs","props","_errors$label","_errors$label2","_useAppFormProvider","useAppFormProvider","register","errors","formState","_jsxs","_Fragment","children","_jsx","InputLabel","label","t","error","base","required","InputText","_objectSpread","placeholder","autoFocus","print","NameInputs","_errors$name","_errors$name2","_errors$name3","_useAppFormProvider2","name","first","second","middle","_ref","defaultState","title","id","onClose","_objectWithoutProperties","_excluded","pServ","useAppServiceProvider","AppModuleName","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","formMethods","useAppForm","defaultValues","businessSubjectType","BusinessSubjectTypeEnum","reValidateMode","shouldUnregister","unregister","handleSubmit","_formMethods$formValu","formValues","currentType","type","_excluded2","registerSelect","setValue","formRenderConfig","useMemo","renderOwnershipTypeSelect","renderLabelInput","includes","renderNamesInputs","renderPersonalTaxCode","renderTaxCode","renderAttractionSourceSelect","ContractorsTypesEnum","ModalBase","fillHeight","width","FlexForm","onSubmit","fData","console","log","createCompany","data","toReqData","onSuccess","ToastService","concat","onError","onLoading","then","AppFormProvider","value","FormInputs","flex","fillWidth","padding","overflow","ButtonsGroup","options","businessSubjectTypeFilterOptions","currentOption","onSelect","_ref2","email","phone","CustomSelect","ownershipTypeFilterOptions","taxCode","ModalFooter","canSubmit"],"sourceRoot":""}