{"version":3,"file":"static/js/667.7e120323.chunk.js","mappings":"uUAoBMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaK,IAAI,KAAKC,IAAI,GAAGH,aAmEtC,UAhEoD,SAAHI,GAQ1C,IAADC,EAAAD,EAPJE,QAAAA,OAAO,IAAAD,EAAGE,EAAAA,GAAiBF,EAC3BG,EAAQJ,EAARI,SACAT,EAAIK,EAAJL,KAEAU,GADML,EAANM,OACIN,EAAJK,MACAE,EAAYP,EAAZO,aACGC,GAAKC,EAAAA,EAAAA,GAAAT,EAAAU,GAEFC,GAAgBC,EAAAA,EAAAA,KACtBC,GAOIC,EAAAA,EAAAA,IAAwB,CAC1BC,eAAaC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACRX,GACAE,GAAY,IACfZ,KAAAA,IAEFsB,UAAUC,EAAAA,EAAAA,GAAY1B,GACtB2B,eAAgB,aAChBC,EAAAP,EAdAQ,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACrBC,EAAQX,EAARW,SACAC,EAAYZ,EAAZY,aACAC,EAAQb,EAARa,SAEAC,EAAUd,EAAVc,WAwBF,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAASb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJR,GAAK,IACTsB,OAAOC,EAAAA,EAAAA,GAAE,cACT3B,SAVJ,SAA0B4B,GACxB,GAAIA,EACF,OAAOP,GAAa,SAAApB,GAAI,OAAI2B,EAAU3B,GAAIW,EAAAA,EAAAA,GAAA,GAAOL,EAAcsB,OAAQ,GAE3E,CAMcC,CAAiB9B,GAC3BmB,QAASA,EACTY,aAAaP,EAAAA,EAAAA,KAACQ,EAAAA,GAAsBpB,EAAAA,EAAAA,GAAA,GAAKL,IAAkB0B,UAE3DC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAAF,SAAA,EACTT,EAAAA,EAAAA,KAACY,EAAAA,EAAgB,CACftC,QAASA,EACTuC,KAAM,OACNC,SAAU,SAAAC,GAAA,IAAGF,EAAIE,EAAJF,KAAMG,EAAKD,EAALC,MAAK,OAAOlB,EAASe,EAAMG,EAAM,EACpDA,MAAOjB,EAAWhC,KAAO,CAACgC,EAAWhC,WAAQkD,KAG/CjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACjD,OAAOkC,EAAAA,EAAAA,GAAE,SAAUgB,UAAW,WAAYC,MAAO1B,EAAOzB,MAAOD,UAAQ,EAAAyC,UACjFT,EAAAA,EAAAA,KAACqB,EAAAA,IAASjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACkC,aAAanB,EAAAA,EAAAA,GAAE,gBAAoBP,EAAS,UAAQ,IAAE5B,UAAQ,EAACuD,WAAS,YAK7F,C","sources":["components/Forms/Directories/FormCreateTag.tsx"],"sourcesContent":["import { DirectoriesFormProps, ITagDirItem } from '../../../types/dir.types';\nimport ModalForm from '../../ModalForm';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { t } from '../../../lang';\nimport InputText from '../../atoms/Inputs/InputText';\nimport React from 'react';\nimport { useAppForm } from '../../../hooks';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from '../../atoms/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { ApiDirType } from '../../../redux/APP_CONFIGS';\nimport { FormInputs } from '../components/atoms';\nimport TagButtonsFilter from 'components/atoms/TagButtonsFilter';\nimport { tagsFilterOptions } from '../../../data/modalFilterOptions.data';\nimport { TagTypeEnum } from '../../../types/directories.types';\n\nexport interface FormCreateTagProps extends DirectoriesFormProps<ApiDirType.TAGS, ITagDirItem, ITagDirItem> {}\n\nconst validation = yup.object().shape({\n  type: yup.string().required(),\n  label: yup.string().max(100).min(3).required(),\n});\n\nconst FormCreateTag: React.FC<FormCreateTagProps> = ({\n  options = tagsFilterOptions,\n  onSubmit,\n  type,\n  parent,\n  data,\n  defaultState,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n    setValue,\n\n    formValues,\n  } = useAppForm<ITagDirItem>({\n    defaultValues: {\n      ...data,\n      ...defaultState,\n      type,\n    },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onChange',\n  });\n\n  // const handleFilterSelect = useCallback(\n  //   (option: FilterOption<ContractorsTypesEnum>) => {\n  //     setValue('type', option?.value);\n  //   },\n  //   [setValue]\n  // );\n\n  function formEventWrapper(evHandler?: AppSubmitHandler<ITagDirItem>) {\n    if (evHandler) {\n      return handleSubmit(data => evHandler(data, { ...submitOptions.state }));\n    }\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      title={t('Create tag')}\n      onSubmit={formEventWrapper(onSubmit)}\n      isValid={isValid}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <FormInputs>\n        <TagButtonsFilter<TagTypeEnum>\n          options={options}\n          name={'type'}\n          onSelect={({ name, value }) => setValue(name, value)}\n          value={formValues.type ? [formValues.type] : undefined}\n        />\n\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n      </FormInputs>\n    </ModalForm>\n  );\n};\n\nexport default FormCreateTag;\n"],"names":["validation","yup","shape","type","required","label","max","min","_ref","_ref$options","options","tagsFilterOptions","onSubmit","data","parent","defaultState","props","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useAppForm","useAppForm","defaultValues","_objectSpread","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","setValue","formValues","_jsx","ModalForm","title","t","evHandler","state","formEventWrapper","extraFooter","FormAfterSubmitOptions","children","_jsxs","FormInputs","TagButtonsFilter","name","onSelect","_ref2","value","undefined","InputLabel","direction","error","InputText","placeholder","autoFocus"],"sourceRoot":""}