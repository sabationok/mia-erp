{"version":3,"file":"static/js/149.e0bef8bb.chunk.js","mappings":"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","sources":["components/Forms/Directories/FormCreateDirTreeComp.tsx"],"sourcesContent":["import ModalForm from 'components/ModalForm';\nimport React from 'react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport TextareaPrimary from '../../atoms/Inputs/TextareaPrimary';\nimport { t } from '../../../lang';\nimport { DirectoriesFormProps, IBaseDirItem, IDirItemBase } from '../../../types/dir.types';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from '../../atoms/FormAfterSubmitOptions';\nimport { useAppForm } from '../../../hooks';\nimport { ApiDirType } from '../../../redux/APP_CONFIGS';\nimport { FormInputs } from '../components/atoms';\n\nexport interface FormCreateDirTreeCompProps<DirType extends ApiDirType = any, FD = any>\n  extends DirectoriesFormProps<DirType, IDirItemBase<DirType>, FD> {}\n\nconst validation = yup.object().shape({\n  label: yup.string().required(),\n  description: yup.string().max(250).optional(),\n});\n\nconst FormCreateDirTreeComp: React.FC<FormCreateDirTreeCompProps> = ({\n  _id,\n  type,\n  edit,\n  defaultState,\n  onSubmit,\n  dirType,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n  } = useAppForm<IBaseDirItem>({\n    defaultValues: {\n      ...defaultState,\n      type,\n    } as IBaseDirItem,\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n\n  const onValid = (data: IBaseDirItem) => {\n    onSubmit && onSubmit(data, submitOptions.state);\n  };\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={handleSubmit(onValid)}\n      isValid={isValid}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <FormInputs>\n        {props.options && (\n          <InputLabel label={t('type')} error={errors.type} disabled>\n            <InputText defaultValue={type ? t(`${type}s` as any).toUpperCase() : type} disabled />\n          </InputLabel>\n        )}\n\n        {defaultState?.parent?._id && (\n          <InputLabel label={t('parentItem')} error={errors.type} disabled>\n            <InputText defaultValue={defaultState?.parent?.label ?? ''} disabled />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('label')} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        {dirType === ApiDirType.BRANDS && (\n          <InputLabel label={t('manufacturer')} error={errors.manufacturer}>\n            <InputText placeholder={t('manufacturer')} {...register('manufacturer')} />\n          </InputLabel>\n        )}\n\n        {/*<InputLabel label={t('')} error={errors.label}>*/}\n        {/*  <InputText placeholder={t('insertLabel')} {...register('label')} autoFocus />*/}\n        {/*</InputLabel>*/}\n\n        <InputLabel label={t('comment')} error={errors.description}>\n          <TextareaPrimary placeholder={t('insertComment')} {...register('description')} maxLength={250} />\n        </InputLabel>\n      </FormInputs>\n    </ModalForm>\n  );\n};\n\nexport default FormCreateDirTreeComp;\n"],"names":["validation","yup","shape","label","required","description","max","optional","_ref","_id","_defaultState$parent","_defaultState$parent$","_defaultState$parent2","type","defaultState","edit","onSubmit","dirType","props","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useAppForm","useAppForm","defaultValues","_objectSpread","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","_jsx","ModalForm","data","state","extraFooter","FormAfterSubmitOptions","children","_jsxs","FormInputs","options","InputLabel","t","error","disabled","InputText","defaultValue","concat","toUpperCase","parent","placeholder","autoFocus","ApiDirType","manufacturer","TextareaPrimary","maxLength"],"sourceRoot":""}