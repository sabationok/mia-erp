{"version":3,"file":"static/js/665.6632eeb9.chunk.js","mappings":"gfAuBO,SAASA,EACdC,GAEA,GAAKD,EACL,MAAO,CACLE,UAAkB,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASC,UAExB,CACO,SAASC,EAAiCC,GAC/C,GAAKA,GACK,OAALA,QAAK,IAALA,GAAAA,EAAOF,UACZ,MAAO,CACLA,WAAWG,EAAAA,EAAAA,IAAc,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOF,WAE/B,CACA,IAGaI,EAAkE,SAAHC,GAKrE,IAADC,EAJJC,EAAYF,EAAZE,aAEAC,GADQH,EAARI,SACOJ,EAAPG,SACGE,GAACC,EAAAA,EAAAA,GAAAN,EAAAO,GAEEC,GAASC,EAAAA,EAAAA,MAAwBC,EAAAA,EAAAA,aACjCC,EAA4C,QAA3BV,GAAGW,EAAAA,EAAAA,aAAwB,IAAAX,OAAA,EAAxBA,EAA0BY,WAC9CC,GAVCC,EAAAA,EAAAA,MAAwBC,KAAKC,KAAI,SAAAC,GAAC,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAC,IAAEE,MAAOF,EAAEG,KAAG,IAY5DC,GAAoBC,EAAAA,EAAAA,UACxB,kBAAMrB,IAAiC,OAAjBS,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBjB,QAAO,GAChD,CAAkB,OAAjBiB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBjB,QAASQ,IAG/BsB,GAA+DC,EAAAA,EAAAA,IAAwC,CACrGC,cAAejC,EAAkC6B,KAD3CK,EAAQH,EAARG,SAAUC,EAAUJ,EAAVI,WAAYC,EAAYL,EAAZK,aAAcC,EAAcN,EAAdM,eAiB5C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAASb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRc,YAAU,EACVC,MAAO7B,EAAE6B,QAASC,EAAAA,EAAAA,GAAE,wBACpBhC,QAASA,GACLE,GAAC,IACLD,SAAUyB,GAnBE,SAAChC,GACf,IAAMuC,EAAUxC,EAAiCC,GAEjDuC,GACE5B,EAAO6B,qBAAqB,CAC1BC,KAAM,CAAEjB,IAAsB,OAAjBC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBD,IAAKiB,KAAMF,GAC3CG,UAAW,WACTC,EAAAA,GAAAA,QAAqB,WACrBrC,GAAWA,GACb,GAEN,IAQoCsC,UAEhCC,EAAAA,EAAAA,MAACC,EAAO,CAACC,KAAM,EAAGC,SAAU,OAAQC,QAAS,QAAQL,SAAA,EACnDV,EAAAA,EAAAA,KAACgB,EAAAA,GAAY5B,EAAAA,EAAAA,GAAA,GACPW,EAAe,YAAa,CAC9BkB,QAASlC,EACTmC,OAAOd,EAAAA,EAAAA,GAAE,qBACTe,aAAaf,EAAAA,EAAAA,GAAE,4BACfgB,SAAU,SAACC,GACT,MAAM,GAANC,OAAUD,EAAEH,MAAK,OAAAI,OAAO,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,KAC5B,OAIJZ,EAAAA,EAAAA,MAACa,EAAAA,GAAO,CAACC,YAAa,MAAOC,eAAgB,gBAAiBC,WAAY,SAAUZ,QAAS,YAAYL,SAAA,EACvGV,EAAAA,EAAAA,KAAC4B,EAAAA,EAAI,CAAAlB,SAAE,2BAEPV,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,CACLC,KAAM,OACNC,QAAmB,OAAVlC,QAAU,IAAVA,OAAU,EAAVA,EAAYmC,uBACrBC,SAAU,SAAAC,GACRtC,EAAS,yBAA0BsC,EAAEH,QACvC,YAMZ,EACMnB,GAAUuB,EAAAA,EAAAA,IAAOX,EAAAA,GAAPW,CAAeC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,QAC/B,W","sources":["components/Forms/warehousing/FormWarehousingSettings.tsx"],"sourcesContent":["import ModalForm, { ModalFormProps } from '../../ModalForm';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { useAppForm } from '../../../hooks';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect';\nimport { usePermissionsSelector, useWarehousesSelector } from '../../../redux/selectors.store';\nimport { FilterOption } from '../../atoms/TabSelector';\nimport FlexBox from '../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport { WarehouseEntity, WarehousingSettingsFormData } from '../../../types/warehousing/warehouses.types';\nimport { t } from 'i18e';\nimport { CompanyDto, CompanyEntity, ICompanyWithConfigs } from 'types/companies/companies.types';\nimport { Text } from '../../atoms/Text';\nimport Switch from '../../atoms/Switch';\nimport { getIdRef } from '../../../utils/data-transform';\nimport { useMemo } from 'react';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { ToastService } from '../../../services';\n\nexport interface FormWarehousingSettingsProps\n  extends Omit<ModalFormProps<any, any, CompanyEntity>, 'onSubmit' | 'onSelect'> {\n  onSubmit?: AppSubmitHandler<CompanyDto>;\n}\nexport function createWarehousingSettingsFormData(\n  company?: Partial<ICompanyWithConfigs>\n): WarehousingSettingsFormData | undefined {\n  if (!createWarehousingSettingsFormData) return;\n  return {\n    warehouse: company?.warehouse,\n  };\n}\nexport function createWarehousingSettingsReqData(fData?: WarehousingSettingsFormData): CompanyDto | undefined {\n  if (!fData) return;\n  if (!fData?.warehouse) return;\n  return {\n    warehouse: getIdRef(fData?.warehouse),\n  };\n}\nconst useWarehousesAsSelectOptions = (): FilterOption[] => {\n  return useWarehousesSelector().list.map(w => ({ ...w, value: w._id }));\n};\nexport const FormWarehousingSettings: React.FC<FormWarehousingSettingsProps> = ({\n  defaultState,\n  onSubmit,\n  onClose,\n  ...p\n}) => {\n  const prServ = useAppServiceProvider()[AppModuleName.permissions];\n  const currentPermission = usePermissionsSelector()?.permission;\n  const warehousesSelectOptions = useWarehousesAsSelectOptions();\n\n  const currenCompanyData = useMemo(\n    () => defaultState || currentPermission?.company,\n    [currentPermission?.company, defaultState]\n  );\n\n  const { setValue, formValues, handleSubmit, registerSelect } = useAppForm<WarehousingSettingsFormData>({\n    defaultValues: createWarehousingSettingsFormData(currenCompanyData),\n  });\n\n  const onValid = (fData: WarehousingSettingsFormData) => {\n    const reqData = createWarehousingSettingsReqData(fData);\n\n    reqData &&\n      prServ.updateCurrentCompany({\n        data: { _id: currenCompanyData?._id, data: reqData },\n        onSuccess: () => {\n          ToastService.success('Updated');\n          onClose && onClose();\n        },\n      });\n  };\n\n  return (\n    <ModalForm\n      fillHeight\n      title={p.title || t('Warehousing settings')}\n      onClose={onClose}\n      {...p}\n      onSubmit={handleSubmit(onValid)}\n    >\n      <Content flex={1} overflow={'auto'} padding={'0 8px'}>\n        <CustomSelect\n          {...registerSelect('warehouse', {\n            options: warehousesSelectOptions,\n            label: t('Default warehouse'),\n            placeholder: t('Select default warehouse'),\n            getLabel: (d: Partial<WarehouseEntity>) => {\n              return `${d.label} | ${d?.code}`;\n            },\n          })}\n        />\n\n        <FlexBox fxDirection={'row'} justifyContent={'space-between'} alignItems={'center'} padding={'0 0 0 8px'}>\n          <Text>{'Reservation available'}</Text>\n\n          <Switch\n            size={'32px'}\n            checked={formValues?.isReservationAvailable}\n            onChange={v => {\n              setValue('isReservationAvailable', v.checked);\n            }}\n          />\n        </FlexBox>\n      </Content>\n    </ModalForm>\n  );\n};\nconst Content = styled(FlexBox)``;\nexport default FormWarehousingSettings;\n"],"names":["createWarehousingSettingsFormData","company","warehouse","createWarehousingSettingsReqData","fData","getIdRef","FormWarehousingSettings","_ref","_usePermissionsSelect","defaultState","onClose","onSubmit","p","_objectWithoutProperties","_excluded","prServ","useAppServiceProvider","AppModuleName","currentPermission","usePermissionsSelector","permission","warehousesSelectOptions","useWarehousesSelector","list","map","w","_objectSpread","value","_id","currenCompanyData","useMemo","_useAppForm","useAppForm","defaultValues","setValue","formValues","handleSubmit","registerSelect","_jsx","ModalForm","fillHeight","title","t","reqData","updateCurrentCompany","data","onSuccess","ToastService","children","_jsxs","Content","flex","overflow","padding","CustomSelect","options","label","placeholder","getLabel","d","concat","code","FlexBox","fxDirection","justifyContent","alignItems","Text","Switch","size","checked","isReservationAvailable","onChange","v","styled","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}