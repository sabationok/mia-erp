{"version":3,"file":"static/js/751.d34c3b8c.chunk.js","mappings":"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","sources":["components/AppPages/pagesStyles.tsx","hooks/usePriceManagementActionsCreator.hook.ts","components/AppPages/priceManagement/PagePriceManagement.tsx","components/Forms/pricing/FormCreatePriceList.tsx"],"sourcesContent":["import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { useModalProvider } from '../Providers/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport {\n  IPriceListItemReqData,\n  PriceEntity,\n  PriceListEntity,\n  PriceListTypeEnum,\n} from '../types/price-management/price-management.types';\nimport FormCreatePriceList from '../components/Forms/pricing/FormCreatePriceList';\nimport { omit } from 'lodash';\nimport { getIdRef } from '../utils/data-transform';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { useNavigate } from 'react-router-dom';\nimport { enumToFilterOptions } from '../utils/fabrics';\nimport { ToastService } from '../services';\n\nexport type PriceManagementActionsCreator = TableActionsCreator<PriceListEntity>;\n\nexport const PriceManagementItemTypeFilterOptions = enumToFilterOptions(PriceListTypeEnum);\n\nexport const createPriceDataForReq = (input: Required<PriceEntity>): IPriceListItemReqData => {\n  return {\n    ...getIdRef(input),\n    data: {\n      ...omit(input, ['createdAt', 'updatedAt', 'deletedAt', '_id']),\n      product: getIdRef(input?.offer),\n    },\n  };\n};\nconst usePriceManagementActionsCreator = (): PriceManagementActionsCreator => {\n  const modals = useModalProvider();\n  const service = useAppServiceProvider()[ServiceName.priceManagement];\n\n  const navigate = useNavigate();\n\n  return useCallback(\n    ctx => {\n      const selected = ctx.selectedRow;\n      return [\n        {\n          name: 'openPriceList',\n          title: 'Відкрити',\n          icon: 'openInNew',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !selected?._id,\n          onClick: () => {\n            selected?._id && navigate(`${selected?._id}`);\n          },\n        },\n\n        {\n          name: 'editPriceList',\n          title: 'Редагувати',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        {\n          name: 'copyPriceList',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        {\n          name: 'archivePriceList',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createPriceList',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: () => {\n            const modal = modals.openModal({\n              ModalChildren: FormCreatePriceList,\n              modalChildrenProps: {\n                filterOptions: PriceManagementItemTypeFilterOptions,\n                defaultData: { type: 'purchases' },\n                onSubmit: (data, o) => {\n                  service.createList({\n                    data,\n                    onSuccess: data => {\n                      o?.onSuccess && o?.onSuccess(data);\n                      o?.close && modal?.onClose();\n                      ToastService.success(`Created price list: ${data.label}`);\n                    },\n                  });\n                },\n              },\n            });\n          },\n        },\n      ];\n    },\n    [modals, navigate, service]\n  );\n};\n\nexport default usePriceManagementActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { usePriceManagementSelector } from '../../../redux/selectors.store';\nimport { ApiQuerySortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport usePriceManagementServiceHook from '../../../hooks/usePriceManagementService.hook';\nimport usePriceManagementActionsCreatorHook from '../../../hooks/usePriceManagementActionsCreator.hook';\nimport { PriceListEntity } from '../../../types/price-management/price-management.types';\nimport { useNavigate } from 'react-router-dom';\nimport { BaseAppPageProps } from '../index';\nimport { priceListColumns } from '../../../data/priceManagement.data';\n\ninterface Props extends BaseAppPageProps {}\nconst PagePriceManagement: React.FC<BaseAppPageProps> = (props: Props) => {\n  const service = usePriceManagementServiceHook();\n  const state = usePriceManagementSelector();\n  const navigate = useNavigate();\n  const { getAll } = service;\n  const actionsCreator = usePriceManagementActionsCreatorHook();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ApiQuerySortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<PriceListEntity> => ({\n      tableData: state.lists,\n      tableTitles: priceListColumns,\n      hasFilter: false,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      actionsCreator,\n      onRowDoubleClick: ev => {\n        ev?.rowId && navigate(`${ev?.rowId}`);\n      },\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      onTableSortChange: (param, sortOrder) => {\n        setSortParams({ sortPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { sortPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, navigate, sortParams, state.lists]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.lists.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n          onSuccess(d) {\n            console.log('PagePriceManagement onSuccess getAll');\n          },\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.lists.length]);\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PagePriceManagement;\n","import {\n  IPriceListReqData,\n  PriceListDto,\n  PriceListEntity,\n  PriceListType,\n} from '../../../types/price-management/price-management.types';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { useAppForm } from '../../../hooks';\nimport { omit } from 'lodash';\nimport FlexBox from '../../atoms/FlexBox';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport { t } from '../../../i18e';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from '../../atoms/FormAfterSubmitOptions';\nimport TextareaPrimary from '../../atoms/Inputs/TextareaPrimary';\n\nexport interface FormCreatePriceListProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n  defaultData?: Partial<PriceListEntity>;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<\n    IPriceListReqData,\n    {\n      onSuccess?: (data: PriceListEntity) => void;\n      onError?: () => void;\n    }\n  >;\n}\n\nconst FormCreatePriceList: React.FC<FormCreatePriceListProps> = ({\n  options,\n  onSubmit,\n  defaultData,\n  edit,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const {\n    formState: { errors, isValid },\n    register,\n    setValue,\n    handleSubmit,\n  } = useAppForm<PriceListDto>({\n    defaultValues: omit(defaultData, ['createdAt', 'updatedAt', '_id']),\n  });\n\n  const onValidSubmit = (data: PriceListDto) =>\n    onSubmit &&\n    onSubmit(\n      {\n        data,\n        _id: defaultData?._id,\n      },\n      { ...submitOptions.state }\n    );\n\n  return (\n    <ModalForm\n      isValid={isValid}\n      onSubmit={handleSubmit(onValidSubmit)}\n      title={'Create price list'}\n      {...props}\n      fitContentV\n      onOptSelect={(_0, value) => {\n        setValue('type', value);\n      }}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <FlexBox fxDirection={'column'} padding={'0 2px 12px'}>\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={8}>\n          <InputLabel label={t('timeFrom')} direction={'vertical'} error={errors.timeFrom} required>\n            <InputText placeholder={t('timeFrom')} type={'datetime-local'} {...register('timeFrom')} />\n          </InputLabel>\n\n          <InputLabel label={t('timeTo')} direction={'vertical'} error={errors.timeTo} required>\n            <InputText placeholder={t('timeTo')} type={'datetime-local'} {...register('timeTo')} />\n          </InputLabel>\n        </FlexBox>\n\n        <InputLabel label={t('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nexport default FormCreatePriceList;\n"],"names":["takeFullGridArea","css","_templateObject","_taggedTemplateLiteral","takeFullPlace","_templateObject2","_templateObject3","PriceManagementItemTypeFilterOptions","enumToFilterOptions","PriceListTypeEnum","modals","useModalProvider","service","useAppServiceProvider","ServiceName","navigate","useNavigate","useCallback","ctx","selected","selectedRow","name","title","icon","iconSize","type","disabled","_id","onClick","concat","separator","modal","openModal","ModalChildren","FormCreatePriceList","modalChildrenProps","filterOptions","defaultData","onSubmit","data","o","createList","onSuccess","close","onClose","ToastService","label","Page","styled","props","usePriceManagementServiceHook","state","usePriceManagementSelector","getAll","actionsCreator","usePriceManagementActionsCreatorHook","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","lists","tableTitles","priceListColumns","hasFilter","hasSearch","showFooter","checkBoxes","onRowDoubleClick","ev","rowId","onFilterSubmit","refresh","query","onLoading","then","onTableSortChange","param","sortOrder","sortPath","dataPath","useEffect","length","d","console","log","_jsx","AppGridPage","path","children","TableList","_objectSpread","_ref","options","edit","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useAppForm","useAppForm","defaultValues","omit","_useAppForm$formState","formState","errors","isValid","register","setValue","handleSubmit","ModalForm","fitContentV","onOptSelect","_0","value","extraFooter","FormAfterSubmitOptions","_jsxs","FlexBox","fxDirection","padding","InputLabel","t","direction","error","required","InputText","placeholder","autoFocus","gap","timeFrom","timeTo","description","TextareaPrimary"],"sourceRoot":""}