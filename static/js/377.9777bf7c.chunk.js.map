{"version":3,"file":"static/js/377.9777bf7c.chunk.js","mappings":"qYAkCMA,EAAaC,EAAAA,SAAaC,MAAM,CAEpCC,kBAAmBF,EAAAA,UAAcG,WACjCC,YAAaJ,EAAAA,SAAaK,IAAI,KAAKF,aAoNrC,UAjN8D,SAAHG,GAAcA,EAARC,SAAwC,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA7BC,EAAYR,EAAZQ,aAAiBC,GAAKC,EAAAA,EAAAA,GAAAV,EAAAW,GAGzFC,GAAUC,EAAAA,EAAAA,KACVC,GAAcC,EAAAA,EAAAA,IAAyBC,EAAAA,EAAAA,MAAsBC,QAAS,CAAEC,eAAe,IACvFC,GAAWC,EAAAA,EAAAA,MACjBC,GAA8BC,EAAAA,EAAAA,UAAsBC,EAAAA,GAAAA,IAAeC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA5DK,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,GAAcC,EAAAA,EAAAA,IAAoC,CACtDC,eAAaC,EAAAA,EAAAA,GAAA,IAAOC,EAAAA,EAAAA,MAAKxB,EAAc,CAAC,YAAa,SAAU,QAAS,SAAU,SAAU,QAAS,aACrGyB,UAAUC,EAAAA,EAAAA,GAAYzC,GACtB0C,eAAgB,aAGHC,EAMXR,EANFS,UAAaD,OACbE,EAKEV,EALFU,aACAC,EAIEX,EAJFW,SACAC,EAGEZ,EAHFY,WACAC,EAEEb,EAFFa,SACAC,EACEd,EADFc,cAGIC,EAAiB,SAACC,GAAgC,IAADC,EACrD,MAAO,CACLD,KAAAA,EACAE,MAAiB,OAAVN,QAAU,IAAVA,GAAuB,QAAbK,EAAVL,EAAYO,mBAAW,IAAAF,OAAb,EAAVA,EAA0BD,GACjCI,SAAU,SAACC,GACTR,EAAS,eAADS,OAAgBN,GAAQK,EAAG,CAAEE,aAAa,EAAMC,aAAa,GACvE,EAEJ,EAEMC,EAAa,SAACC,GAAwC,OAAK,SAACC,GAChE,IAAMC,EAA2DF,EAAW,CAACA,QAAYG,EAEnFC,EAAqEJ,OAEvEG,EADA,CAAC,aAAc,kBAAmB,gBAAiB,YAAa,QAAS,SAAU,UAOjFE,EAAUH,GAAYI,EAAAA,EAAAA,MAAKL,EAAM,CAAE,OAAKL,QAAAW,EAAAA,EAAAA,GAAKL,KAAcE,GAAY1B,EAAAA,EAAAA,MAAKuB,EAAOG,GAAaH,EAEtGpC,GACE2C,EAAAA,EAAAA,IAA0B,CACxBC,UAAWnD,EAAQmD,UAAUT,GAAY,QACzCU,KAAM,CACJC,IAAKV,EAAMU,IACXD,MAAME,EAAAA,EAAAA,KAASnC,EAAAA,EAAAA,GAAC,CAAEkC,IAAKV,EAAMU,KAAQN,OAI7C,CAAE,EAEIQ,EAAmB,SACvBb,GAKI,IAADc,EACH,OAAKd,EAOE,CACLe,UAA4B,QAAnBD,EAAExD,EAAQyD,iBAAS,IAAAD,OAAA,EAAjBA,EAAoBd,GAC/BgB,UAAW5B,EAAcY,GAAUiB,QACnCtE,SAAUqC,EAAae,EAAWC,KAT3B,CACLe,UAAWzD,EAAQyD,UAAUG,KAC7BF,WAAW,EACXrE,SAAUqC,EAAae,EAAWC,IAQxC,EAEA,OACEmB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CACRC,YAAU,EACVC,MAAOnE,EAAMmE,MACbC,QAASpE,EAAMoE,QAIfC,SAAA,EAEAL,EAAAA,EAAAA,MAACM,EAAAA,GAAahD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACiD,OAAOC,EAAAA,EAAAA,GAAE,cAAkBd,KAAkB,IAAAW,SAAA,EAC1DI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTH,OAAOC,EAAAA,EAAAA,GAAE,SACTG,MAAOhD,EAAO4C,MAEdK,WAAuB,OAAZ7E,QAAY,IAAZA,GAAAA,EAAc8E,WAAUR,UAEnCI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRyD,aAAaP,EAAAA,EAAAA,GAAE,gBACX1C,EAAS,UAAQ,IAErB8C,WAAuB,OAAZ7E,QAAY,IAAZA,GAAAA,EAAc8E,WACzBG,YAAwB,OAAZjF,QAAY,IAAZA,GAAAA,EAAc8E,iBAI9BJ,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,QAASS,SAAsB,OAAZlF,QAAY,IAAZA,OAAY,EAAZA,EAAc8E,UAAUR,UAC9DI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACyD,aAAaP,EAAAA,EAAAA,GAAE,SAAa1C,EAAS,kBAAgB,IAAEmD,SAAsB,OAAZlF,QAAY,IAAZA,OAAY,EAAZA,EAAc8E,gBAG5FJ,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,iBAAkBS,SAAsB,OAAZlF,QAAY,IAAZA,OAAY,EAAZA,EAAc8E,UAAUR,UACvEI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRyD,aAAaP,EAAAA,EAAAA,GAAE,kBACX1C,EAAS,kBAAgB,IAC7BmD,SAAsB,OAAZlF,QAAY,IAAZA,OAAY,EAAZA,EAAc8E,gBAI5BJ,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,oBAAqBG,MAAa,OAANhD,QAAM,IAANA,GAAmB,QAAblC,EAANkC,EAAQW,mBAAW,IAAA7C,OAAb,EAANA,EAAqByF,IAAIb,UACxEI,EAAAA,EAAAA,KAACU,EAAAA,GAAY7D,EAAAA,EAAAA,GAAA,GAAKY,EAAe,YAGnCuC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,yBAA0BG,MAAa,OAANhD,QAAM,IAANA,GAAmB,QAAbjC,EAANiC,EAAQW,mBAAW,IAAA5C,OAAb,EAANA,EAAqB0F,SAASf,UAClFI,EAAAA,EAAAA,KAACU,EAAAA,GAAY7D,EAAAA,EAAAA,GAAA,GAAKY,EAAe,qBAIrCuC,EAAAA,EAAAA,KAACH,EAAAA,GAAahD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACiD,OAAOC,EAAAA,EAAAA,GAAE,cAAkBd,EAAiB,oBAAkB,IAAAW,UAC3EL,EAAAA,EAAAA,MAACqB,EAAAA,GAAO,CAACC,YAAa,MAAOC,IAAK,EAAElB,SAAA,EAClCI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTH,OAAOC,EAAAA,EAAAA,GAAE,yBACTG,MAAO1C,EAAc,4CAA4C0C,MAAMN,UAEvEI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,GAAA,CACRyD,YAAa,WACbS,KAAM,SACNC,MAAO,UACH3D,EAAS,2CAA4C,CAAE4D,eAAe,SAI9EjB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTH,OAAOC,EAAAA,EAAAA,GAAE,uBACTG,MAAO1C,EAAc,0CAA0C0C,MAAMN,UAErEI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,GAAA,CACRyD,YAAa,WACbS,KAAM,SACNC,MAAO,UACH3D,EAAS,yCAA0C,CAAE4D,eAAe,eAMhFjB,EAAAA,EAAAA,KAACH,EAAAA,EAAa,CAACC,OAAOC,EAAAA,EAAAA,GAAE,WAAWH,UACjCI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,qBAAqBH,UACxCI,EAAAA,EAAAA,KAACkB,EAAAA,EAAgB,CACfC,QAASvF,EACTwF,WAAY,EACZC,UAAQ,SAwBd9B,EAAAA,EAAAA,MAACM,EAAAA,GAAahD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACiD,OAAOC,EAAAA,EAAAA,GAAE,eAAmBd,EAAiB,eAAa,IAAAW,SAAA,EACvEI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,cAAeG,MAAa,OAANhD,QAAM,IAANA,GAAkB,QAAZhC,EAANgC,EAAQoE,kBAAU,IAAApG,OAAZ,EAANA,EAAoBqG,IAAI3B,UACjEI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,GAAA,CAACyD,YAAa,OAAWjD,EAAS,uBAO9C2C,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACH,OAAOC,EAAAA,EAAAA,GAAE,gBAAiBG,MAAa,OAANhD,QAAM,IAANA,GAAkB,QAAZ/B,EAAN+B,EAAQoE,kBAAU,IAAAnG,OAAZ,EAANA,EAAoBoG,IAAI3B,UACnEI,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CACfhB,UAAQ,EACR1C,SAAU,SAAAyD,GACR9E,EAAW8E,EACb,EACA3D,MAAOpB,MAIVA,IACCwD,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACO,UAAQ,EAACV,OAAOC,EAAAA,EAAAA,GAAE,qBAAsBG,MAAa,OAANhD,QAAM,IAANA,GAAkB,QAAZ9B,EAAN8B,EAAQoE,kBAAU,IAAAlG,GAAQ,QAARC,EAAlBD,EAAoBqG,cAAM,IAAApG,OAApB,EAANA,EAA6BmB,GAASoD,UAC/FI,EAAAA,EAAAA,KAACK,EAAAA,IAASxD,EAAAA,EAAAA,GAAA,CAAC2D,UAAQ,EAACF,YAAa,SAAajD,EAAS,qBAADW,OAAsBxB,cAMxF,C","sources":["components/Forms/methods/FormDeliveryMethod.tsx"],"sourcesContent":["import { ModalFormProps } from '../../ModalForm';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { LangKeyEnum, t } from '../../../i18e';\nimport React, { useState } from 'react';\nimport { useAppForm } from '../../../hooks';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport FlexBox from '../../atoms/FlexBox';\nimport { IDeliveryMethod, ServiceMethodBase } from '../../../types/integrations.types';\nimport { useTranslatedMethodsList } from '../../../hooks/useTranslatedMethodsList.hook';\nimport { usePaymentsSelector } from '../../../redux/selectors.store';\nimport { DisabledStates, IBaseKeys } from '../../../types/utils.types';\nimport { omit, pick } from 'lodash';\nimport { useAppDispatch } from '../../../redux/store.store';\nimport ModalBase from '../../atoms/Modal';\nimport { useLoaders } from '../../../Providers/Loaders/useLoaders.hook';\nimport { updateDeliveryMethodThunk } from 'redux/deliveries/deliveries.thunks';\nimport { toReqData } from '../../../utils';\nimport { AccordionForm } from 'components/atoms/FormArea/AccordionForm';\nimport InputText from 'components/atoms/Inputs/InputText';\nimport InputLabel from 'components/atoms/Inputs/InputLabel';\nimport ButtonSwitch from 'components/atoms/ButtonSwitch';\nimport TagButtonsFilter from '../../atoms/TagButtonsFilter';\nimport LangButtonsGroup from 'components/atoms/LangButtonsGroup';\n\nexport interface FormDeliveryMethodProps extends Omit<ModalFormProps<any, any, IDeliveryMethod>, 'onSubmit'> {\n  _id?: string;\n  create?: boolean;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<IDeliveryMethodFormData, { logAfterSubmit?: boolean }>;\n}\nexport interface IDeliveryMethodFormData\n  extends Omit<IDeliveryMethod, Exclude<IBaseKeys, '_id'> | 'service' | 'extService'> {}\n\nconst validation = yup.object().shape({\n  // label: yup.string().max(100),\n  disabledForClient: yup.boolean().optional(),\n  description: yup.string().max(250).optional(),\n} as Record<keyof ServiceMethodBase | string, any>);\n\nconst FormDeliveryMethod: React.FC<FormDeliveryMethodProps> = ({ onSubmit, defaultState, ...props }) => {\n  // const submitOptions = useAfterSubmitOptions();\n\n  const loaders = useLoaders<'main' | keyof IDeliveryMethodFormData>();\n  const pmntMethods = useTranslatedMethodsList(usePaymentsSelector().methods, { withFullLabel: true });\n  const dispatch = useAppDispatch();\n  const [langKey, setLangKey] = useState<LangKeyEnum>(LangKeyEnum.ua);\n  const formMethods = useAppForm<IDeliveryMethodFormData>({\n    defaultValues: { ...omit(defaultState, ['isDefault', 'author', 'owner', 'editor', 'parent', 'value', 'service']) },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n  const {\n    formState: { errors },\n    handleSubmit,\n    register,\n    formValues,\n    setValue,\n    getFieldState,\n  } = formMethods;\n\n  const registerSwitch = (name: keyof DisabledStates) => {\n    return {\n      name,\n      value: formValues?.disabledFor?.[name],\n      onChange: (v: boolean) => {\n        setValue(`disabledFor.${name}`, v, { shouldTouch: true, shouldDirty: true });\n      },\n    };\n  };\n\n  const getOnValid = (areaName?: keyof IDeliveryMethodFormData) => (fData: IDeliveryMethodFormData) => {\n    const pickPaths: (keyof IDeliveryMethodFormData)[] | undefined = areaName ? [areaName] : undefined;\n\n    const omitPaths: (keyof IDeliveryMethodFormData | string)[] | undefined = !areaName\n      ? ['cmsConfigs', 'invoicingPolicy', 'paymentPolicy', 'isDefault', 'owner', 'author', 'editor']\n      : undefined;\n\n    // if (defaultState?.isDefault) {\n    //   omitPaths?.push('label', 'type');\n    // }\n\n    const reqData = pickPaths ? pick(fData, ['_id', ...pickPaths]) : omitPaths ? omit(fData, omitPaths) : fData;\n\n    dispatch(\n      updateDeliveryMethodThunk({\n        onLoading: loaders.onLoading(areaName || 'main'),\n        data: {\n          _id: fData._id,\n          data: toReqData({ _id: fData._id, ...reqData }),\n        },\n      })\n    );\n  };\n\n  const registerFormArea = (\n    areaName?: keyof IDeliveryMethodFormData\n  ): {\n    canSubmit?: boolean;\n    isLoading?: boolean;\n    onSubmit?: (ev: React.BaseSyntheticEvent) => void;\n  } => {\n    if (!areaName) {\n      return {\n        isLoading: loaders.isLoading.main,\n        canSubmit: true,\n        onSubmit: handleSubmit(getOnValid(areaName)),\n      };\n    }\n    return {\n      isLoading: loaders.isLoading?.[areaName],\n      canSubmit: getFieldState(areaName).isDirty,\n      onSubmit: handleSubmit(getOnValid(areaName)),\n    };\n  };\n\n  return (\n    <ModalBase\n      fillHeight\n      title={props.title}\n      onClose={props.onClose}\n      // isLoading={isLoading}\n      // onSubmit={handleSubmit(onValid)}\n      // isValid={isValid}\n      // extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <AccordionForm label={t('Main info')} {...registerFormArea()}>\n        <InputLabel\n          label={t('label')}\n          error={errors.label}\n          // disabled={defaultState?.isDefault}\n          required={!defaultState?.isDefault}\n        >\n          <InputText\n            placeholder={t('insertLabel')}\n            {...register('label')}\n            // disabled={defaultState?.isDefault}\n            required={!defaultState?.isDefault}\n            autoFocus={!defaultState?.isDefault}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('Type')} disabled={defaultState?.isDefault}>\n          <InputText placeholder={t('Type')} {...register('type.internal')} disabled={defaultState?.isDefault} />\n        </InputLabel>\n\n        <InputLabel label={t('Type external')} disabled={defaultState?.isDefault}>\n          <InputText\n            placeholder={t('Type external')}\n            {...register('type.external')}\n            disabled={defaultState?.isDefault}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('Disabled for all')} error={errors?.disabledFor?.all}>\n          <ButtonSwitch {...registerSwitch('all')} />\n        </InputLabel>\n\n        <InputLabel label={t('Disabled for customer')} error={errors?.disabledFor?.customer}>\n          <ButtonSwitch {...registerSwitch('customer')} />\n        </InputLabel>\n      </AccordionForm>\n\n      <AccordionForm label={t('Invoicing')} {...registerFormArea('invoicingPolicy')}>\n        <FlexBox fxDirection={'row'} gap={8}>\n          <InputLabel\n            label={t('Min cost for delivery')}\n            error={getFieldState('invoicingPolicy.configs.minCost.delivery').error}\n          >\n            <InputText\n              placeholder={'Min cost'}\n              type={'number'}\n              align={'center'}\n              {...register('invoicingPolicy.configs.minCost.delivery', { valueAsNumber: true })}\n            />\n          </InputLabel>\n\n          <InputLabel\n            label={t('Min cost for return')}\n            error={getFieldState('invoicingPolicy.configs.minCost.return').error}\n          >\n            <InputText\n              placeholder={'Min cost'}\n              type={'number'}\n              align={'center'}\n              {...register('invoicingPolicy.configs.minCost.return', { valueAsNumber: true })}\n            />\n          </InputLabel>\n        </FlexBox>\n      </AccordionForm>\n\n      <AccordionForm label={t('Payment')}>\n        <InputLabel label={t('Available methods')}>\n          <TagButtonsFilter\n            options={pmntMethods}\n            numColumns={1}\n            multiple\n            // onChangeIds={opt => {\n            //   setValue('paymentPolicy', isString(opt.value) ? [opt.value] : opt.value, {\n            //     shouldDirty: true,\n            //     shouldTouch: true,\n            //   });\n            // }}\n          />\n        </InputLabel>\n\n        {/*<InputLabel*/}\n        {/*  label={t('Min cost for return')}*/}\n        {/*  direction={'row'}*/}\n        {/*  error={getFieldState('invoicingPolicy.configs.minCost.return').error}*/}\n        {/*>*/}\n        {/*  <InputText*/}\n        {/*    placeholder={'Min cost'}*/}\n        {/*    type={'number'}*/}\n        {/*    align={'center'}*/}\n        {/*    {...register('paymentPolicy.configs.minCost.return', { valueAsNumber: true })}*/}\n        {/*  />*/}\n        {/*</InputLabel>*/}\n      </AccordionForm>\n\n      <AccordionForm label={t('Cms params')} {...registerFormArea('cmsConfigs')}>\n        <InputLabel label={t('Custom key')} error={errors?.cmsConfigs?.key}>\n          <InputText placeholder={'Key'} {...register('cmsConfigs.key')} />\n        </InputLabel>\n\n        {/*<InputLabel label={t('External reference')} error={errors?.cmsConfigs?.extRef}>*/}\n        {/*  <InputText placeholder={'Reference'} {...register('cmsConfigs.extRef')} />*/}\n        {/*</InputLabel>*/}\n\n        <InputLabel label={t('Language key')} error={errors?.cmsConfigs?.key}>\n          <LangButtonsGroup\n            disabled\n            onChange={key => {\n              setLangKey(key);\n            }}\n            value={langKey}\n          />\n        </InputLabel>\n\n        {langKey && (\n          <InputLabel disabled label={t('Label by lang key')} error={errors?.cmsConfigs?.labels?.[langKey]}>\n            <InputText disabled placeholder={'Label'} {...register(`cmsConfigs.labels.${langKey}`)} />\n          </InputLabel>\n        )}\n      </AccordionForm>\n    </ModalBase>\n  );\n};\n\nexport default FormDeliveryMethod;\n"],"names":["validation","yup","shape","disabledForClient","optional","description","max","_ref","onSubmit","_errors$disabledFor","_errors$disabledFor2","_errors$cmsConfigs","_errors$cmsConfigs2","_errors$cmsConfigs3","_errors$cmsConfigs3$l","defaultState","props","_objectWithoutProperties","_excluded","loaders","useLoaders","pmntMethods","useTranslatedMethodsList","usePaymentsSelector","methods","withFullLabel","dispatch","useAppDispatch","_useState","useState","LangKeyEnum","_useState2","_slicedToArray","langKey","setLangKey","formMethods","useAppForm","defaultValues","_objectSpread","omit","resolver","yupResolver","reValidateMode","errors","formState","handleSubmit","register","formValues","setValue","getFieldState","registerSwitch","name","_formValues$disabledF","value","disabledFor","onChange","v","concat","shouldTouch","shouldDirty","getOnValid","areaName","fData","pickPaths","undefined","omitPaths","reqData","pick","_toConsumableArray","updateDeliveryMethodThunk","onLoading","data","_id","toReqData","registerFormArea","_loaders$isLoading","isLoading","canSubmit","isDirty","main","_jsxs","ModalBase","fillHeight","title","onClose","children","AccordionForm","label","t","_jsx","InputLabel","error","required","isDefault","InputText","placeholder","autoFocus","disabled","all","ButtonSwitch","customer","FlexBox","fxDirection","gap","type","align","valueAsNumber","TagButtonsFilter","options","numColumns","multiple","cmsConfigs","key","LangButtonsGroup","labels"],"sourceRoot":""}