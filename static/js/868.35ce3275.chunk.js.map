{"version":3,"file":"static/js/868.35ce3275.chunk.js","mappings":"iMAEaA,GAAmBC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mDAItBC,GAAgBH,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4CAIVF,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,uC,8MCMZI,EAAuB,WAClC,IAAMC,GAAUC,EAAAA,EAAAA,KACVC,GAAQC,EAAAA,EAAAA,MACNC,EAAWJ,EAAXI,OAGRC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoCL,EAAAA,EAAAA,YAA8BM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3DE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwCT,EAAAA,EAAAA,YAAgCU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjEE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GA0CpC,MAAO,CACLG,aAzCkBC,EAAAA,EAAAA,UAClB,iBAAiC,CAC/BC,UAAWnB,EAAMoB,QACjBC,YAAaC,EAAAA,GAEbC,WAAW,EACXC,WAAW,EACXC,YAAY,EACZC,YAAY,EAEZC,eAAgB,SAAAZ,GACdC,EAAgBD,GAChBb,EAAO,CAAE0B,KAAM,CAAEC,SAAS,EAAMC,MAAO,CAAEf,aAAAA,EAAcJ,WAAAA,IAAgBoB,UAAWvB,IAAgBwB,MACpG,EACAC,kBAAmB,SAACC,EAAOC,GACzBvB,EAAc,CAAEwB,SAAUF,EAAMG,SAAUF,UAAAA,IAC1CjC,EAAO,CACL0B,KAAM,CAAEC,SAAS,EAAMC,MAAO,CAAEnB,WAAY,CAAEyB,SAAUF,EAAMG,SAAUF,UAAAA,GAAapB,aAAAA,IACrFgB,UAAWvB,IACVwB,MACL,EACD,GACD,CAACjB,EAAcb,EAAQS,EAAYX,EAAMoB,UAoBzCb,UAAAA,EACAI,WAAAA,EACAI,aAAAA,EAEJ,EAaMuB,EAAOC,EAAAA,GAAAA,IAAU/C,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gBACnBH,EAAAA,IAGJ,UAhBmC,SAACkD,GAClC,IAAAC,EAAmC5C,IAA3BoB,EAAWwB,EAAXxB,YAAaV,EAASkC,EAATlC,UAErB,OACEmC,EAAAA,EAAAA,KAACC,EAAAA,QAAW,CAACC,KAAMJ,EAAMI,KAAKC,UAC5BH,EAAAA,EAAAA,KAACJ,EAAI,CAAAO,UACHH,EAAAA,EAAAA,KAACI,EAAAA,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK9B,GAAW,IAAEV,UAAWA,QAI/C,C,wNCxEMyC,EAAqC,CACzCC,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,WAAYC,MAAO,SAAUR,KAAM,aAClDS,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,WAAYC,MAAO,SAAUR,KAAM,aACrDU,MAAO,QACPC,OAAQ,WAsEGjC,IAnEoBkC,EAAAA,EAAAA,IAAkBC,EAAAA,GAE9BA,EAAAA,EAAAA,KAA4BN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,KAC9BA,EAAAA,EAAAA,QAA+BN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,QAG3CA,EAAAA,EAAAA,oBACAN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,oBAKFA,EAAAA,EAAAA,mBACAN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,mBAGUA,EAAAA,EAAAA,QAA+BN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,QACjCA,EAAAA,EAAAA,WAAkCN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,WAGhDA,EAAAA,EAAAA,qBACAN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,qBAGUA,EAAAA,EAAAA,UAAiCN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,UACnCA,EAAAA,EAAAA,SAAgCN,EAAAA,EAAAA,GAAEM,EAAAA,EAAAA,SA0CS,CAChE,CACER,IAAK,CACHC,KAAK,GAADQ,QAAKP,EAAAA,EAAAA,GAAE,WACXQ,QAAS,SAAAC,GAAE,OAAIA,EAAGC,MAAM,GAE1BR,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,YAAaQ,QAAS,SAAAG,GAAG,OAAIX,EAAAA,EAAAA,GAAE,YAAY,GAM7DG,MAAO,QACPC,OAAQ,UAGV,CACEN,IAAK,CACHC,MAAMC,EAAAA,EAAAA,GAAE,gBACRC,MAAO,MACPO,QAAS,SAAAC,GAAE,IAAAG,EAAAC,EAAA,OAAIC,EAAAA,EAAAA,IAAyB,QAAlBF,EAAW,QAAXC,EAACJ,EAAGM,eAAO,IAAAF,OAAA,EAAVA,EAAYG,aAAK,IAAAJ,EAAAA,EAAI,EAAE,GAEhDV,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,eAAgBC,MAAO,MAAOO,QAAS,SAAAC,GAAE,IAAAQ,EAAAC,EAAA,OAAY,QAARD,EAAAR,EAAGU,aAAK,IAAAF,OAAA,EAARA,EAAUG,UAAoB,QAAdF,EAAIT,EAAGM,eAAO,IAAAG,OAAA,EAAVA,EAAYG,WAAU,GACzGlB,MAAO,QACPC,OAAQ,oBAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,wBAAyBQ,QAAS,SAAAC,GAAE,IAAAa,EAAA,OAAM,OAAFb,QAAE,IAAFA,GAAa,QAAXa,EAAFb,EAAIc,iBAAS,IAAAD,OAAX,EAAFA,EAAeE,QAAQ,GAC9EtB,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,wBAAyBQ,QAAS,SAAAC,GAAE,IAAAgB,EAAA,OAAM,OAAFhB,QAAE,IAAFA,GAAa,QAAXgB,EAAFhB,EAAIc,iBAAS,IAAAE,OAAX,EAAFA,EAAeC,QAAQ,GACjFvB,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,SAAUQ,QAAS,SAAAC,GAAE,IAAAkB,EAAAC,EAAA,OAAM,OAAFnB,QAAE,IAAFA,GAAS,QAAPkB,EAAFlB,EAAIoB,aAAK,IAAAF,GAAW,QAAXC,EAATD,EAAWJ,iBAAS,IAAAK,OAAlB,EAAFA,EAAsBJ,QAAQ,GACtEtB,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,YAAaQ,QAAS,SAAAC,GAAE,IAAAqB,EAAA,OAAM,OAAFrB,QAAE,IAAFA,GAAS,QAAPqB,EAAFrB,EAAIoB,aAAK,IAAAC,OAAP,EAAFA,EAAWC,QAAQ,GACjE5B,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CACHC,MAAMC,EAAAA,EAAAA,GAAE,YACRQ,QAAS,SAAAC,GAAE,IAAAuB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACG,QAAXN,EAAAvB,EAAG8B,gBAAQ,IAAAP,OAAA,EAAXA,EAAajC,QAAmB,QAAXkC,EAAAxB,EAAG8B,gBAAQ,IAAAN,GAAM,QAANC,EAAXD,EAAalC,YAAI,IAAAmC,OAAN,EAAXA,EAAmBM,OAAQ,KAAiB,QAAdL,EAAG1B,EAAG8B,gBAAQ,IAAAJ,GAAM,QAANC,EAAXD,EAAapC,YAAI,IAAAqC,OAAN,EAAXA,EAAmBK,UAC9D,QAAXJ,EAAA5B,EAAG8B,gBAAQ,IAAAF,OAAA,EAAXA,EAAaK,SAAoB,QAAfJ,EAAI7B,EAAG8B,gBAAQ,IAAAD,OAAA,EAAXA,EAAaI,MAAMC,OAC1C,SAAS,GAEbzC,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,SAAUP,KAAM,kBAClCU,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CACHC,MAAMC,EAAAA,EAAAA,GAAE,YACRQ,QAAS,SAAAC,GAAE,IAAAmC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACG,QAAXN,EAAAnC,EAAG0C,gBAAQ,IAAAP,OAAA,EAAXA,EAAa7C,QAAmB,QAAX8C,EAAApC,EAAG0C,gBAAQ,IAAAN,GAAM,QAANC,EAAXD,EAAa9C,YAAI,IAAA+C,OAAN,EAAXA,EAAmBN,OAAQ,KAAiB,QAAdO,EAAGtC,EAAG0C,gBAAQ,IAAAJ,GAAM,QAANC,EAAXD,EAAahD,YAAI,IAAAiD,OAAN,EAAXA,EAAmBP,UAC9D,QAAXQ,EAAAxC,EAAG0C,gBAAQ,IAAAF,OAAA,EAAXA,EAAaP,SAAoB,QAAfQ,EAAIzC,EAAG0C,gBAAQ,IAAAD,OAAA,EAAXA,EAAaR,MAAMC,OAC1C,SAAS,GAEbzC,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,SAAUP,KAAM,kBAClCU,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CACHC,MAAMC,EAAAA,EAAAA,GAAE,aAIVG,MAAO,QACPC,OAAQ,QAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,aACfG,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,eACfG,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,WAAYP,KAAM,WACjCU,MAAO,QACPC,OAAQ,eAEV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,YACfG,MAAO,QACPC,OAAQ,eAGV,CACEN,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,WAAYP,KAAM,gBACjCS,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,SAAUP,KAAM,iBAClCU,MAAO,QACPC,OAAQ,eAEVP,IAGIuD,EAAmD,CAAC,WAAY,QAAS,YAYxE,IAAMC,EAA0D,CACrE,CACEvD,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,eAAgBQ,QAAS,SAAAC,GAAE,IAAA6C,EAAA,OAAY,QAAZA,EAAI7C,EAAG8C,aAAK,IAAAD,OAAA,EAARA,EAAUZ,KAAK,GAC7DxC,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,mBAAoBQ,QAAS,SAAAC,GAAE,IAAA+C,EAAA,OAAgB,QAAhBA,EAAI/C,EAAGgD,iBAAS,IAAAD,OAAA,EAAZA,EAAcd,KAAK,GACxEtC,OAAQ,cACRD,MAAO,SAET,CACEL,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,gBAAiBQ,QAAS,SAAAC,GAAE,OAAIA,EAAGO,KAAK,GACvDd,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,cAAeQ,QAAS,SAAAC,GAAE,OAAIA,EAAGiD,QAAQ,GAC3DtD,OAAQ,cACRD,MAAO,UACRI,QAAAoD,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,QAAqBD,EAAAA,EAAAA,GAvBjBP,EAAUS,KAAI,SAAAC,GACnB,MAAO,CACLhE,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE8D,GAAM7D,MAAO,MAAOO,QAAS,SAAAC,GAAE,IAAAsD,EAAA,OAAIjD,EAAAA,EAAAA,IAAU,OAAFL,QAAE,IAAFA,GAAS,QAAPsD,EAAFtD,EAAKqD,UAAI,IAAAC,OAAP,EAAFA,EAAWC,OAAO,GAC5E9D,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE8D,GAAM7D,MAAO,MAAOO,QAAS,SAAAC,GAAE,IAAAwD,EAAA,OAAInD,EAAAA,EAAAA,IAAU,OAAFL,QAAE,IAAFA,GAAS,QAAPwD,EAAFxD,EAAKqD,UAAI,IAAAG,OAAP,EAAFA,EAAWC,WAAW,GACnF9D,OAAQ,cACRD,MAAO,OAEX,KAiB4B,CAC5B,CACEL,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,aAAcQ,QAAS,SAAAC,GAAE,IAAA0D,EAAA,OAAY,QAAZA,EAAI1D,EAAG8C,aAAK,IAAAY,OAAA,EAARA,EAAUC,GAAG,GACzDlE,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,iBAAkBQ,QAAS,SAAAC,GAAE,IAAA4D,EAAA,OAAgB,QAAhBA,EAAI5D,EAAGgD,iBAAS,IAAAY,OAAA,EAAZA,EAAcD,GAAG,GACpEhE,OAAQ,cACRD,MAAO,SAET,CACEL,IAAK,CAAEC,MAAMC,EAAAA,EAAAA,GAAE,kBAAmBQ,QAAS,SAAAC,GAAE,IAAA6D,EAAA,OAAY,QAAZA,EAAI7D,EAAG8C,aAAK,IAAAe,OAAA,EAARA,EAAUC,OAAO,GAClErE,OAAQ,CAAEH,MAAMC,EAAAA,EAAAA,GAAE,sBAAuBQ,QAAS,SAAAC,GAAE,IAAA+D,EAAA,OAAgB,QAAhBA,EAAI/D,EAAGgD,iBAAS,IAAAe,OAAA,EAAZA,EAAcD,OAAO,GAC7EnE,OAAQ,cACRD,MAAO,SAETN,IAGW4E,EACXpB,EA8CWqB,EAA0C,CACrD,CAAExF,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAC3C,CAAEd,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAE3C,CAAEd,SAAU,2BAA4BwD,OAAO1C,EAAAA,EAAAA,GAAE,wBAAuB,MAAAO,QAASP,EAAAA,EAAAA,GAAE,SAAS2E,gBAC5F,CAAEzF,SAAU,2BAA4BwD,OAAO1C,EAAAA,EAAAA,GAAE,wBAAuB,MAAAO,QAASP,EAAAA,EAAAA,GAAE,SAAS2E,gBAE5F,CAAEzF,SAAU,UAAWwD,OAAO1C,EAAAA,EAAAA,GAAE,aAChC,CAAEd,SAAU,SAAUwD,OAAO1C,EAAAA,EAAAA,GAAE,WAE/B,CAAEd,SAAU,gBAAiBwD,OAAO1C,EAAAA,EAAAA,GAAE,kBACtC,CAAEd,SAAU,eAAgBwD,OAAO1C,EAAAA,EAAAA,GAAE,iBACrC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,uBACvC,CAAEd,SAAU,gBAAiBwD,OAAO1C,EAAAA,EAAAA,GAAE,sBAEtC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,sBAAuBwD,OAAO1C,EAAAA,EAAAA,GAAE,wBAC5C,CAAEd,SAAU,uBAAwBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAC7C,CAAEd,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,uBAE3C,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,sBAAuBwD,OAAO1C,EAAAA,EAAAA,GAAE,wBAC5C,CAAEd,SAAU,uBAAwBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAC7C,CAAEd,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,uBAE3C,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,kBAAmBwD,OAAO1C,EAAAA,EAAAA,GAAE,oBAExC,CAAEd,SAAU,YAAawD,OAAO1C,EAAAA,EAAAA,GAAE,eAClC,CAAEd,SAAU,YAAawD,OAAO1C,EAAAA,EAAAA,GAAE,eAClC,CAAEd,SAAU,YAAawD,OAAO1C,EAAAA,EAAAA,GAAE,gBAIvB4E,EAA8C,CACzD,CAAE1F,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAC3C,CAAEd,SAAU,qBAAsBwD,OAAO1C,EAAAA,EAAAA,GAAE,yBAC3C,CAAEd,SAAU,UAAWwD,OAAO1C,EAAAA,EAAAA,GAAE,aAChC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,mBACvC,CAAEd,SAAU,kBAAmBwD,OAAO1C,EAAAA,EAAAA,GAAE,oBACxC,CAAEd,SAAU,gBAAiBwD,OAAO1C,EAAAA,EAAAA,GAAE,kBACtC,CAAEd,SAAU,eAAgBwD,OAAO1C,EAAAA,EAAAA,GAAE,iBACrC,CAAEd,SAAU,iBAAkBwD,OAAO1C,EAAAA,EAAAA,GAAE,uBACvC,CAAEd,SAAU,gBAAiBwD,OAAO1C,EAAAA,EAAAA,GAAE,sB","sources":["components/AppPages/pagesStyles.tsx","components/AppPages/refunds/PageRefunds.tsx","data/orders.data.ts"],"sourcesContent":["import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { useRefundsSelector } from '../../../redux/selectors.store';\nimport { ApiQuerySortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport { ordersTableColumns } from '../../../data/orders.data';\nimport { IRefund } from '../../../redux/refunds/refunds.types';\nimport useOrdersServiceHook from '../../../hooks/useOrdersService.hook';\nimport { BaseAppPageProps } from '../index';\n\ninterface Props extends BaseAppPageProps {}\n\nexport const useOrderTableConfigs = () => {\n  const service = useOrdersServiceHook();\n  const state = useRefundsSelector();\n  const { getAll } = service;\n  // const actionsCreator = useOrdersActionsCreatorHook();\n  // const filterSelectors = useProductsFilterSelectorsHook();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ApiQuerySortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IRefund> => ({\n      tableData: state.refunds,\n      tableTitles: ordersTableColumns as never,\n      // tableSortParams: ordersSearchParams.filter(el => el.sort),\n      hasFilter: true,\n      hasSearch: true,\n      showFooter: true,\n      checkBoxes: true,\n      // actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      onTableSortChange: (param, sortOrder) => {\n        setSortParams({ sortPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { sortPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [filterParams, getAll, sortParams, state.refunds]\n  );\n\n  // useEffect(() => {\n  //   if (sortParams || filterParams) {\n  //     return;\n  //   }\n  //\n  //   if (!sortParams && !filterParams) {\n  //     if (state.orders.length === 0) {\n  //       getAll({\n  //         data: { refresh: true },\n  //         onLoading: setIsLoading,\n  //       });\n  //     }\n  //   }\n  // }, [filterParams, getAll, isLoading, sortParams, state.orders.length, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\nconst PageRefunds: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOrderTableConfigs();\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageRefunds;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { OrderEntity, OrderStatusEnum } from '../types/orders/orders.types';\nimport { IOrderTempSlot, OrderSlotEntity } from '../types/orders/order-slot.types';\nimport { t } from '../lang';\nimport { TableSearchParam, TableSortParam } from '../components/TableList/tableTypes.types';\nimport { FilterOption } from '../components/atoms/TabSelector';\nimport { getStatusesByEnum } from './statuses.data';\nimport { getBasePriceColumns } from './priceManagement.data';\nimport { toPrice } from '../utils/numbers';\nimport { Values } from '../types/utils.types';\n\nconst createdDateColumn: CellTittleProps = {\n  top: { name: t('updated'), align: 'center', path: 'updatedAt' },\n  bottom: { name: t('created'), align: 'center', path: 'createdAt' },\n  width: '150px',\n  action: 'dateDbl',\n};\n\nexport const orderStatusesData = getStatusesByEnum(OrderStatusEnum);\nexport const orderStatuses: FilterOption<OrderStatusEnum>[] = [\n  { _id: '1', value: OrderStatusEnum.new, label: t(OrderStatusEnum.new), color: 'rgb(136,222,255)' },\n  { _id: '2', value: OrderStatusEnum.inWork, label: t(OrderStatusEnum.inWork), color: 'rgb(239,173,255)' },\n  {\n    _id: '3.1',\n    value: OrderStatusEnum.rejectedByCustomer,\n    label: t(OrderStatusEnum.rejectedByCustomer),\n    color: 'rgb(255,145,2)',\n  },\n  {\n    _id: '3.2',\n    value: OrderStatusEnum.rejectedByManager,\n    label: t(OrderStatusEnum.rejectedByManager),\n    color: 'rgb(255,205,105)',\n  },\n  { _id: '4.1', value: OrderStatusEnum.active, label: t(OrderStatusEnum.active), color: 'rgb(255,236,84)' },\n  { _id: '4.2', value: OrderStatusEnum.fulfilled, label: t(OrderStatusEnum.fulfilled), color: 'rgb(151,255,95)' },\n  {\n    _id: '4.3',\n    value: OrderStatusEnum.fulfilledWithRefund,\n    label: t(OrderStatusEnum.fulfilledWithRefund),\n    color: 'rgb(255,53,53)',\n  },\n  { _id: '5.1', value: OrderStatusEnum.archived, label: t(OrderStatusEnum.archived), color: 'rgb(164,171,182)' },\n  { _id: '5.2', value: OrderStatusEnum.expired, label: t(OrderStatusEnum.expired), color: 'rgb(164,171,182)' },\n];\n\n// export type DataPath =\n//   | 'owner.label'\n//   | 'owner.name'\n//   | 'author.name'\n//   | 'author.email'\n//   | 'editor.name'\n//   | 'editor.email'\n//   | 'auditor.name'\n//   | 'auditor.email'\n//   | 'contractor.name'\n//   | 'contractor.type'\n//   | 'eventDate'\n//   | 'type'\n//   | 'status'\n//   | 'amount'\n//   | 'currency'\n//   | 'comment'\n//   | 'createdAt'\n//   | 'updatedAt'\n//   | 'mark.label'\n//   | 'invoice.label'\n//   | 'invoice.code'\n//   | 'invoice.number'\n//   | 'payment.label'\n//   | 'payment.code'\n//   | 'payment.number'\n//   | 'order.code'\n//   | 'total'\n//   | 'manager.name'\n//   | 'manager.code'\n//   | 'manager.email'\n//   | 'customer.name'\n//   | 'customer.phone'\n//   | 'receiver.name'\n//   | 'receiver.phone'\n//   | 'invoices'\n//   | 'payments'\n//   | 'transporters';\n\nexport const ordersTableColumns: CellTittleProps<OrderEntity>[] = [\n  {\n    top: {\n      name: `${t('Status')}`,\n      getData: rd => rd.status,\n    },\n    bottom: { name: t('Priority'), getData: _rd => t('undefined') },\n\n    // bottom: {\n    //   name: `${t('Status')}/${t('External')}`,\n    //   getData: rd => rd.status?.external,\n    // },\n    width: '150px',\n    action: 'status',\n  },\n\n  {\n    top: {\n      name: t('Total amount'),\n      align: 'end',\n      getData: rd => toPrice(rd.summary?.netto ?? 0),\n    },\n    bottom: { name: t('Slots count'), align: 'end', getData: rd => rd.slots?.length || rd.summary?.slotsCount },\n    width: '120px',\n    action: 'numberWithSpaces',\n  },\n  {\n    top: { name: t('Reference / Internal'), getData: rd => rd?.reference?.internal },\n    bottom: { name: t('Reference / External'), getData: rd => rd?.reference?.external },\n    width: '190px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('Group'), getData: rd => rd?.group?.reference?.internal },\n    bottom: { name: t('Strategy'), getData: rd => rd?.group?.strategy },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: {\n      name: t('Customer'),\n      getData: rd =>\n        (rd.customer?.name && rd.customer?.name?.first + ' ' + rd.customer?.name?.second) ||\n        (rd.customer?.label && rd.customer?.label.base) ||\n        '--- ---',\n    },\n    bottom: { name: t('Phone'), path: 'customer.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: {\n      name: t('Receiver'),\n      getData: rd =>\n        (rd.receiver?.name && rd.receiver?.name?.first + ' ' + rd.receiver?.name?.second) ||\n        (rd.receiver?.label && rd.receiver?.label.base) ||\n        '--- ---',\n    },\n    bottom: { name: t('Phone'), path: 'receiver.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: {\n      name: t('Invoices'),\n\n      // getData: () => ['5651651323213', '6546565165651', '546565165651', '565165132321', '54656516565'],\n    },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: t('Payments') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('Deliveries') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('comment'), path: 'comment' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('Refunds') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n\n  {\n    top: { name: t('Manager'), path: 'manager.name' },\n    bottom: { name: t('email'), path: 'manager.email' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  createdDateColumn,\n];\n\nconst extraKeys: ('cashback' | 'bonus' | 'discount')[] = ['cashback', 'bonus', 'discount'];\nfunction getTempOrderSlotColumns(): CellTittleProps<OrderSlotEntity>[] {\n  return extraKeys.map(key => {\n    return {\n      top: { name: t(key), align: 'end', getData: rd => toPrice(rd?.[key]?.amount) },\n      bottom: { name: t(key), align: 'end', getData: rd => toPrice(rd?.[key]?.percentage) },\n      action: 'valueByPath',\n      width: '90px',\n    };\n  });\n}\n\nexport const orderSlotsTableColumns: CellTittleProps<OrderSlotEntity>[] = [\n  {\n    top: { name: t('Offer label'), getData: rd => rd.offer?.label },\n    bottom: { name: t('Variation label'), getData: rd => rd.variation?.label },\n    action: 'valueByPath',\n    width: '210px',\n  },\n  {\n    top: { name: t('Total amount'), getData: rd => rd.netto },\n    bottom: { name: t('Total q-ty'), getData: rd => rd.quantity },\n    action: 'valueByPath',\n    width: '125px',\n  },\n  ...getBasePriceColumns(),\n  ...getTempOrderSlotColumns(),\n  {\n    top: { name: t('Offer sku'), getData: rd => rd.offer?.sku },\n    bottom: { name: t('Variation sku'), getData: rd => rd.variation?.sku },\n    action: 'valueByPath',\n    width: '150px',\n  },\n  {\n    top: { name: t('Offer bar-code'), getData: rd => rd.offer?.barCode },\n    bottom: { name: t('Variation bar-code'), getData: rd => rd.variation?.barCode },\n    action: 'valueByPath',\n    width: '150px',\n  },\n  createdDateColumn,\n];\n\nexport const tempOrderSlotTableColumns: CellTittleProps<IOrderTempSlot>[] =\n  orderSlotsTableColumns as CellTittleProps<IOrderTempSlot>[];\n\nconst OrdersAllowedPaths = [\n  'manager.email',\n  'manager.code',\n\n  'managers.email',\n  'managers.code',\n\n  'customer.email',\n  'customer.phone',\n  'customer.name.first',\n  'customer.name.second',\n  'customer.reference',\n\n  'receiver.email',\n  'receiver.phone',\n  'receiver.name.first',\n  'receiver.name.second',\n  'receiver.reference',\n\n  'barCode',\n  'reference.internal',\n  'reference.external',\n\n  'group.reference.internal',\n  'group.reference.external',\n\n  'status',\n  'deletedAt',\n  'updatedAt',\n  'createdAt',\n\n  'warehouse.label',\n  'warehouse.code',\n\n  // 'variations.label',\n  // 'variations.barCode',\n  // 'variations.sku',\n  // 'variations.price.out',\n  // 'variations.deletedAt',\n  // 'variations.updatedAt',\n  // 'variations.createdAt',\n] as const;\n\nexport type SaleOrdersSortParam = TableSortParam<Values<typeof OrdersAllowedPaths>>;\nexport const ordersSortParams: SaleOrdersSortParam[] = [\n  { dataPath: 'reference.internal', label: t('Reference / Internal') },\n  { dataPath: 'reference.external', label: t('Reference / External') },\n\n  { dataPath: 'group.reference.internal', label: t('Reference / Internal') + ` / ${t('Group').toLowerCase()}` },\n  { dataPath: 'group.reference.external', label: t('Reference / External') + ` / ${t('Group').toLowerCase()}` },\n\n  { dataPath: 'barCode', label: t('Bar-code') },\n  { dataPath: 'status', label: t('Status') },\n\n  { dataPath: 'manager.email', label: t('Manager email') },\n  { dataPath: 'manager.code', label: t('Manager code') },\n  { dataPath: 'managers.email', label: t('Any managers email') },\n  { dataPath: 'managers.code', label: t('Any managers code') },\n\n  { dataPath: 'customer.email', label: t('Customer email') },\n  { dataPath: 'customer.phone', label: t('Customer phone') },\n  { dataPath: 'customer.name.first', label: t('Customer first name') },\n  { dataPath: 'customer.name.second', label: t('Customer second name') },\n  { dataPath: 'customer.reference', label: t('Customer reference') },\n\n  { dataPath: 'receiver.email', label: t('Customer email') },\n  { dataPath: 'receiver.phone', label: t('Customer phone') },\n  { dataPath: 'receiver.name.first', label: t('Customer first name') },\n  { dataPath: 'receiver.name.second', label: t('Customer second name') },\n  { dataPath: 'receiver.reference', label: t('Customer reference') },\n\n  { dataPath: 'warehouse.code', label: t('Warehouse code') },\n  { dataPath: 'warehouse.label', label: t('Warehouse label') },\n\n  { dataPath: 'createdAt', label: t('Created at') },\n  { dataPath: 'updatedAt', label: t('Updated at') },\n  { dataPath: 'deletedAt', label: t('Deleted at') },\n];\n\nexport type SaleOrdersSearchParam = TableSearchParam<Values<typeof OrdersAllowedPaths>>;\nexport const ordersSearchParams: SaleOrdersSearchParam[] = [\n  { dataPath: 'reference.internal', label: t('Reference / Internal') },\n  { dataPath: 'reference.external', label: t('Reference / External') },\n  { dataPath: 'barCode', label: t('Bar-code') },\n  { dataPath: 'warehouse.code', label: t('Warehouse code') },\n  { dataPath: 'warehouse.label', label: t('Warehouse label') },\n  { dataPath: 'manager.email', label: t('Manager email') },\n  { dataPath: 'manager.code', label: t('Manager code') },\n  { dataPath: 'managers.email', label: t('Any managers email') },\n  { dataPath: 'managers.code', label: t('Any managers code') },\n];\n"],"names":["takeFullGridArea","css","_templateObject","_taggedTemplateLiteral","takeFullPlace","_templateObject2","_templateObject3","useOrderTableConfigs","service","useOrdersServiceHook","state","useRefundsSelector","getAll","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","refunds","tableTitles","ordersTableColumns","hasFilter","hasSearch","showFooter","checkBoxes","onFilterSubmit","data","refresh","query","onLoading","then","onTableSortChange","param","sortOrder","sortPath","dataPath","Page","styled","props","_useOrderTableConfigs","_jsx","AppGridPage","path","children","TableList","_objectSpread","createdDateColumn","top","name","t","align","bottom","width","action","getStatusesByEnum","OrderStatusEnum","concat","getData","rd","status","_rd","_rd$summary$netto","_rd$summary","toPrice","summary","netto","_rd$slots","_rd$summary2","slots","length","slotsCount","_rd$reference","reference","internal","_rd$reference2","external","_rd$group","_rd$group$reference","group","_rd$group2","strategy","_rd$customer","_rd$customer2","_rd$customer2$name","_rd$customer3","_rd$customer3$name","_rd$customer4","_rd$customer5","customer","first","second","label","base","_rd$receiver","_rd$receiver2","_rd$receiver2$name","_rd$receiver3","_rd$receiver3$name","_rd$receiver4","_rd$receiver5","receiver","extraKeys","orderSlotsTableColumns","_rd$offer","offer","_rd$variation","variation","quantity","_toConsumableArray","getBasePriceColumns","map","key","_rd$key","amount","_rd$key2","percentage","_rd$offer2","sku","_rd$variation2","_rd$offer3","barCode","_rd$variation3","tempOrderSlotTableColumns","ordersSortParams","toLowerCase","ordersSearchParams"],"sourceRoot":""}