{"version":3,"file":"static/js/679.d7494be9.chunk.js","mappings":"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","sources":["components/Forms/methods/FormInvoicingMethod.tsx"],"sourcesContent":["import FormAfterSubmitOptions, { useAfterSubmitOptions } from '../../atoms/FormAfterSubmitOptions';\nimport React, { useState } from 'react';\nimport { useAppForm } from '../../../hooks';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { t } from '../../../lang';\nimport InputText from '../../atoms/Inputs/InputText';\nimport ButtonSwitch from '../../atoms/ButtonSwitch';\nimport { Text } from '../../atoms/Text';\nimport FlexBox from '../../atoms/FlexBox';\nimport LangButtonsGroup from '../../atoms/LangButtonsGroup';\nimport { IInvoicingMethod, ServiceMethodBase } from '../../../types/integrations.types';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { IBaseKeys } from '../../../redux/app-redux.types';\nimport * as yup from 'yup';\nimport styled from 'styled-components';\nimport { DisabledStates } from '../../../types/utils.types';\n\nexport interface FormInvoicingMethodProps {}\n\nexport interface FormInvoicingMethodProps extends Omit<ModalFormProps<any, any, IInvoicingMethod>, 'onSubmit'> {\n  _id?: string;\n  create?: boolean;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<IInvoicingMethodFormData, { logAfterSubmit?: boolean }>;\n}\n\nexport interface IInvoicingMethodFormData extends Omit<IInvoicingMethod, IBaseKeys | 'service' | 'extService'> {}\n\nconst validation = yup.object().shape({\n  // label: yup.string().max(100),\n  disabledForClient: yup.boolean().optional(),\n  description: yup.string().max(250).optional(),\n} as Record<keyof ServiceMethodBase | string, any>);\n\nconst FormInvoicingMethod: React.FC<FormInvoicingMethodProps> = ({ onSubmit, defaultState, ...props }) => {\n  const submitOptions = useAfterSubmitOptions();\n  // const bankAccounts = useTransactionsSelector().bankAccounts;\n  const [isLoading, setIsLoading] = useState(false);\n\n  const formMethods = useAppForm<IInvoicingMethodFormData>({\n    defaultValues: { ...defaultState },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n  const {\n    formState: { errors, isValid },\n    handleSubmit,\n    register,\n    reset,\n    formValues,\n  } = formMethods;\n\n  const registerSwitch = (name: keyof DisabledStates) => {\n    return {\n      name,\n      value: formValues?.disabledFor ? !!formValues?.disabledFor[name] : undefined,\n      onchange: (v: boolean) => {\n        // setValue(`disabledFor.${name}` as never, v, { shouldTouch: true });\n      },\n    };\n  };\n\n  const onValid = (fData: IInvoicingMethodFormData) => {\n    onSubmit &&\n      onSubmit(fData, {\n        ...submitOptions.state,\n        onLoading: setIsLoading,\n        onSuccess: () => {\n          if (submitOptions.state.clear) {\n            reset({});\n          }\n        },\n      });\n  };\n\n  return (\n    <ModalForm\n      title={defaultState?._id ? t('Update invoicing method') : t('Create invoicing method')}\n      {...props}\n      fillHeight\n      isLoading={isLoading}\n      onSubmit={handleSubmit(onValid)}\n      isValid={isValid}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <Inputs>\n        {!defaultState?.isDefault && (\n          <>\n            <InputLabel\n              label={t('label')}\n              error={errors.label}\n              disabled={formValues.isDefault}\n              required={!formValues.isDefault}\n            >\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('label')}\n                disabled={formValues.isDefault}\n                required={!formValues.isDefault}\n                autoFocus={!formValues.isDefault}\n              />\n            </InputLabel>\n\n            <InputLabel\n              label={t('Type')}\n              error={errors.label}\n              disabled={formValues.isDefault}\n              required={!formValues.isDefault}\n            >\n              <InputText\n                placeholder={t('Type')}\n                {...register('type')}\n                disabled={formValues.isDefault}\n                required={!formValues.isDefault}\n              />\n            </InputLabel>\n          </>\n        )}\n\n        <InputLabel label={t('Disabled')} error={errors?.disabledFor?.all}>\n          <ButtonSwitch {...registerSwitch('all')} />\n        </InputLabel>\n\n        <InputLabel label={t('Disabled for customer')} error={errors?.disabledFor?.customer}>\n          <ButtonSwitch {...registerSwitch('customer')} />\n        </InputLabel>\n\n        <BorderedBox>\n          <Text $size={13} $weight={600}>\n            {t('Invoicing policy')}\n          </Text>\n        </BorderedBox>\n\n        {/*<CustomSelect*/}\n        {/*  {...registerSelect('bankAccount', {*/}\n        {/*    label: t('Recipient bank account'),*/}\n        {/*    placeholder: t('Select recipient bank account'),*/}\n        {/*  })}*/}\n        {/*  options={bankAccounts}*/}\n        {/*/>*/}\n\n        <FlexBox fxDirection={'row'} gap={8}>\n          {/*<InputLabel label={t('Min cost for delivery')} error={errors?.invoicing?.minCost?.delivery}>*/}\n          {/*  <InputText*/}\n          {/*    placeholder={'Min cost'}*/}\n          {/*    type={'number'}*/}\n          {/*    align={'center'}*/}\n          {/*    {...register('invoicing.minCost.delivery', { valueAsNumber: true })}*/}\n          {/*  />*/}\n          {/*</InputLabel>*/}\n\n          {/*<InputLabel label={t('Min cost for return')} error={errors?.invoicing?.minCost?.return}>*/}\n          {/*  <InputText*/}\n          {/*    placeholder={'Min cost'}*/}\n          {/*    type={'number'}*/}\n          {/*    align={'center'}*/}\n          {/*    {...register('invoicing.minCost.return', { valueAsNumber: true })}*/}\n          {/*  />*/}\n          {/*</InputLabel>*/}\n        </FlexBox>\n\n        <BorderedBox>\n          <Text $size={13} $weight={600}>\n            {t('Cms configs')}\n          </Text>\n        </BorderedBox>\n\n        <InputLabel label={t('Cms key')} error={errors?.cmsConfigs?.key}>\n          <InputText placeholder={'Key'} {...register('cmsConfigs.key')} />\n        </InputLabel>\n\n        <InputLabel label={t('Language key')} error={errors?.cmsConfigs?.key}>\n          <LangButtonsGroup />\n        </InputLabel>\n\n        <InputLabel label={t('Label by lang key')} error={errors?.cmsConfigs?.labels?.ua}>\n          <InputText placeholder={'Label'} {...register('cmsConfigs.labels.ua')} />\n        </InputLabel>\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled(FlexBox)`\n  padding: 0 8px 8px;\n\n  background-color: inherit;\n`;\n\nconst BorderedBox = styled(FlexBox)`\n  padding: 8px;\n\n  margin: 8px 0 0;\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default FormInvoicingMethod;\n"],"names":["validation","yup","shape","disabledForClient","optional","description","max","Inputs","styled","FlexBox","_templateObject","_taggedTemplateLiteral","BorderedBox","_templateObject2","p","theme","modalBorderColor","_ref","_errors$disabledFor","_errors$disabledFor2","_errors$cmsConfigs","_errors$cmsConfigs2","_errors$cmsConfigs3","_errors$cmsConfigs3$l","onSubmit","defaultState","props","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","formMethods","useAppForm","defaultValues","_objectSpread","resolver","yupResolver","reValidateMode","_formMethods$formStat","formState","errors","isValid","handleSubmit","register","reset","formValues","registerSwitch","name","value","disabledFor","undefined","onchange","v","_jsx","ModalForm","title","_id","t","fillHeight","fData","state","onLoading","onSuccess","clear","extraFooter","FormAfterSubmitOptions","children","_jsxs","isDefault","_Fragment","InputLabel","label","error","disabled","required","InputText","placeholder","autoFocus","all","ButtonSwitch","customer","Text","$size","$weight","fxDirection","gap","cmsConfigs","key","LangButtonsGroup","labels","ua"],"sourceRoot":""}