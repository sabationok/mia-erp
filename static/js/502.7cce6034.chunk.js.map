{"version":3,"file":"static/js/502.7cce6034.chunk.js","mappings":"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","sources":["hooks/useProductsFilterSelectors.hook.ts","hooks/useOffersActionsCreator.hook.tsx","components/AppPages/offers/PageOffers.tsx","components/Modals/EditOfferModal.tsx"],"sourcesContent":["import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { OfferEntity } from '../types/offers/offers.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof OfferEntity>[] => {\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import { CreatedModal, useModalProvider } from '../Providers/ModalProvider/ModalProvider';\nimport { useCallback, useMemo, useState } from 'react';\nimport { TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport { OfferEntity, OfferStatusEnum } from '../types/offers/offers.types';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { t } from '../i18e';\nimport EditOfferModal from '../components/Modals/EditOfferModal';\nimport CreateOfferModal from '../components/Modals/CreateOfferModal';\nimport { useAppRouter } from './useRouter.hook';\nimport {\n  useDirectorySelector,\n  useOffersSelector,\n  usePropertiesSelector,\n  useWarehousesSelector,\n} from '../redux/selectors.store';\nimport { UseLoadersReturn } from '../Providers/Loaders/useLoaders.hook';\nimport { useAppForm } from './index';\nimport { enumToFilterOptions, toReqData } from '../utils';\nimport { FlexBox, FlexForm } from '../components/atoms/FlexBox';\nimport ButtonSwitch from '../components/atoms/ButtonSwitch';\nimport ModalBase from '../components/atoms/Modal';\nimport InputLabel from '../components/atoms/Inputs/InputLabel';\nimport InputText from '../components/atoms/Inputs/InputText';\nimport { GetAllOffersQuery } from '../api';\nimport { AccordionFormArea } from '../components/atoms/FormArea/AccordionForm';\nimport ModalFooter from '../components/atoms/Modal/ModalFooter';\nimport ButtonsGroup from '../components/atoms/ButtonsGroup';\nimport { offerTypeFilterOptions } from '../data/modalFilterOptions.data';\nimport TagButtonsFilter from '../components/atoms/TagButtonsFilter';\nimport { ApiDirType } from '../redux/APP_CONFIGS';\nimport OfferCategoriesSelector from '../components/Forms/offers/categories/OfferCategoriesSelector';\nimport OfferPropertySelector from '../components/Forms/offers/variations/OfferPropertySelector';\nimport { PropertiesGroupEntity } from '../types/offers/properties.types';\nimport TabSelector from '../components/atoms/TabSelector';\nimport { omit } from 'lodash';\n\nexport type OffersActionsCreator = TableActionsCreator<OfferEntity>;\n\nexport const useOffersActionsCreator = ({\n  loaders,\n}: { loaders?: UseLoadersReturn<'refresh' | 'offer'> } = {}): OffersActionsCreator => {\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const router = useAppRouter();\n  const modals = useModalProvider();\n  const stateMap = useOffersSelector().dataMap;\n\n  return useCallback(\n    ctx => {\n      const currentId = ctx.selectedRow?._id;\n      const Offer = currentId ? stateMap?.[currentId] : undefined;\n\n      return [\n        {\n          name: 'filter',\n          icon: 'filterOff',\n          onClick: () => {\n            modals.create(OffersFilterModal, {\n              onSubmit: data => {\n                service.getAll({\n                  params: toReqData(data),\n                });\n              },\n            });\n          },\n        },\n        { separator: true },\n        {\n          name: 'refreshData',\n          title: t('Refresh data'),\n          icon: 'refresh',\n          type: 'onlyIcon',\n          onClick: () => {\n            service.getAll({\n              data: { refresh: true },\n              onLoading: loaders ? loaders.onLoading('refresh') : ctx.onRefresh,\n            });\n          },\n        },\n        { separator: true },\n\n        {\n          name: 'review',\n          title: 'Перегляд продукту',\n          icon: 'openInNew',\n          disabled: !currentId,\n          type: 'onlyIcon',\n          navTo: `/app/${router.params.permissionId}/offers/` + currentId,\n        },\n\n        {\n          name: 'edit',\n          title: 'Змінити',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !currentId,\n          onClick: () => {\n            if (Offer) {\n              modals.create(EditOfferModal, {\n                offer: Offer,\n              });\n            } else if (currentId) {\n              service.getOne({\n                data: { data: { params: { _id: currentId } } },\n                onLoading: loaders ? loaders.onLoading('offer') : ctx.onRefresh,\n                onSuccess: ({ data }) => {\n                  // router.push({ query: { offerId: data._id } });\n\n                  modals.create(EditOfferModal, {\n                    offer: data,\n                  });\n                },\n              });\n            }\n          },\n        },\n        {\n          name: 'copy',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !Offer,\n          onClick: () => {\n            Offer &&\n              modals.create(EditOfferModal, {\n                offer: Offer,\n                copy: true,\n              });\n          },\n        },\n        {\n          name: 'archiveOffer',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createOffer',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: () => {\n            modals.create(CreateOfferModal);\n          },\n        },\n      ];\n    },\n\n    [loaders, modals, router, service, stateMap]\n  );\n};\n\nexport default useOffersActionsCreator;\n\nexport type OffersFilterForm = GetAllOffersQuery & {\n  propsIdsMap?: Record<string, string[]>;\n};\n\nconst keys = ['createdAt', 'updatedAt', 'deletedAt'] as const;\nconst OffersFilterModal = ({ onSubmit, onClose }: { onSubmit?: (data: GetAllOffersQuery) => void } & CreatedModal) => {\n  const dirTags = useDirectorySelector(ApiDirType.TAGS);\n  const dirBrands = useDirectorySelector(ApiDirType.BRANDS);\n  const dirCategories = useDirectorySelector(ApiDirType.CATEGORIES_PROD);\n  const dirProperties = usePropertiesSelector();\n  const warehouses = useWarehousesSelector().list;\n\n  const filter = useAppForm<OffersFilterForm>();\n\n  const offerStatusFilterOptions = enumToFilterOptions(OfferStatusEnum);\n  const [template, setTemplate] = useState<PropertiesGroupEntity>();\n\n  const mappedOptions = useMemo(() => {\n    return {\n      tags: dirTags.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      categories: dirCategories.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      brands: dirBrands.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      properties: dirProperties.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      warehouses: warehouses.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n    };\n  }, [dirBrands.directory, dirCategories.directory, dirProperties, dirTags.directory, warehouses]);\n\n  return (\n    <ModalBase title={'Filter'} onClose={onClose}>\n      <FlexForm\n        padding={'8px'}\n        onSubmit={filter.handleSubmit(fData => {\n          console.log(fData);\n          onSubmit && onSubmit(omit(fData, ['propsIdsMap']));\n        })}\n      >\n        <InputLabel label={t('Status')}>\n          <TagButtonsFilter<OfferStatusEnum>\n            onSelectValue={option => {\n              filter.setValue('approved', option.value as OfferStatusEnum);\n            }}\n            value={filter.formValues.approved ? [filter.formValues.approved] : undefined}\n            options={offerStatusFilterOptions}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('Type')}>\n          <ButtonsGroup value={filter.formValues.type} options={offerTypeFilterOptions} form={filter} />\n        </InputLabel>\n\n        <InputLabel label={t('Visibility')}>\n          <ButtonSwitch\n            name={'visible'}\n            value={filter.formValues.visible}\n            onChange={val => {\n              filter.setValue('visible', val, { shouldTouch: true, shouldDirty: true });\n            }}\n          />\n        </InputLabel>\n\n        <AccordionFormArea hideFooter label={'Tags'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('tagsIds', values);\n            }}\n            value={filter.formValues.tagsIds}\n            options={mappedOptions.tags}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Categories'} maxHeight={'500px'}>\n          <OfferCategoriesSelector\n            onChangeIds={ids => {\n              filter.setValue('categoriesIds', ids);\n            }}\n            selectedIds={filter.formValues.categoriesIds}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Properties'}>\n          <TabSelector\n            options={dirProperties}\n            defaultOption={template}\n            onOptSelect={option => {\n              setTemplate(option);\n            }}\n          />\n\n          {template?.childrenList?.map(item => {\n            return (\n              <OfferPropertySelector\n                key={item._id}\n                item={item}\n                multiple\n                selectedIds={filter.formValues.propsIdsMap?.[item._id]}\n                onChangeIds={(propId, valueIds) => {\n                  filter.setValue(`propsIdsMap.${propId}`, valueIds, { shouldDirty: true, shouldTouch: true });\n\n                  filter.setValue(\n                    `propertiesIds`,\n                    Array.from(new Set([...(filter.formValues.propertiesIds ?? []), ...valueIds])),\n                    { shouldDirty: true, shouldTouch: true }\n                  );\n                }}\n              />\n            );\n          })}\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Brands'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('brandsIds', values);\n            }}\n            value={filter.formValues.brandsIds}\n            options={mappedOptions.brands}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Warehouses'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('warehouse.ids', values);\n            }}\n            value={filter.formValues.warehouse?.ids}\n            options={mappedOptions.warehouses}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea label={'Date fields'} hideFooter>\n          {keys.map(key => {\n            return (\n              <FlexBox\n                key={key}\n                gap={12}\n                fxDirection={'row'}\n                fillWidth\n                xsStyles={{ fxDirection: 'column', gap: 0, margin: '0 0 8px' }}\n              >\n                <InputLabel flex={1} label={`${t(key)} ${t('From').toLowerCase()}:`}>\n                  <InputText type={'datetime-local'} {...filter.register(`${key}.dateFrom`)} />\n                </InputLabel>\n\n                <InputLabel flex={1} label={`${t(key)} ${t('To').toLowerCase()}:`}>\n                  <InputText type={'datetime-local'} {...filter.register(`${key}.dateTo`)} />\n                </InputLabel>\n              </FlexBox>\n            );\n          })}\n        </AccordionFormArea>\n\n        <ModalFooter hasOnSubmit />\n      </FlexForm>\n    </ModalBase>\n  );\n};\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { useOffersSelector } from '../../../redux/selectors.store';\nimport { GetAllOffersQuery } from '../../../api';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport useProductsFilterSelectorsHook from '../../../hooks/useProductsFilterSelectors.hook';\nimport useOffersActionsCreator from '../../../hooks/useOffersActionsCreator.hook';\nimport { BaseAppPageProps } from '../index';\nimport {\n  OfferSearchParam,\n  OfferSortParam,\n  offersSearchParams,\n  offersSortParams,\n  offersTableColumns,\n} from '../../../data';\nimport { useLoaders } from '../../../Providers/Loaders/useLoaders.hook';\nimport {\n  TableSearchFormState,\n  TableSortFormState,\n} from '../../TableList/TableOverHead/TableSearchForm/TableSearchForm';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { setValueByPath } from '../../../utils';\nimport FlexBox from '../../atoms/FlexBox';\nimport { isString } from 'lodash';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOffers: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOffersTableSettings({});\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} showFooter isLoading={isLoading?.offers} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled(FlexBox)`\n  ${takeFullGridArea}\n`;\n\nexport default PageOffers;\n\nexport const useOffersTableSettings = ({\n  searchState,\n  sortState,\n}: {\n  searchState?: TableSearchFormState<OfferSearchParam>;\n  sortState?: TableSortFormState<OfferSortParam>;\n}) => {\n  const loaders = useLoaders<'offers' | 'refresh' | 'offer'>({\n    offers: { content: 'Refreshing...' },\n    refresh: { content: 'Refreshing...' },\n    offer: { content: 'Refreshing...' },\n  });\n  const { onLoading, isLoading } = loaders;\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const state = useOffersSelector();\n\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useOffersActionsCreator({ loaders });\n\n  const [sortParams, setSortParams] = useState(sortState);\n  const [searchParams, setSearchParams] = useState<TableSearchFormState | undefined>(searchState);\n\n  const tableConfig = useMemo(\n    (): ITableListProps<OfferEntity, OfferSearchParam, OfferSortParam> => ({\n      onSubmitSearch: data => {\n        if (data.search) {\n          const params: GetAllOffersQuery = {};\n\n          const path = data.param?.dataPath;\n          if (path && data.search) {\n            if (isString(path)) setValueByPath(path, data.search, params, { mutation: true });\n          }\n\n          setSearchParams(data);\n\n          getAll({\n            params,\n            onLoading: onLoading('offers'),\n          }).then();\n        } else {\n          getAll({\n            onLoading: onLoading('offers'),\n          }).then();\n        }\n      },\n      tableData: state.list,\n      tableTitles: offersTableColumns,\n      searchParams: offersSearchParams,\n      sortParams: offersSortParams,\n      filterSelectors,\n      hasFilter: false,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      actionsCreator,\n\n      onTableSortChange: (param, order) => {\n        setSortParams({ param, order });\n\n        getAll({\n          params: {\n            sortOrder: order,\n            sortPath: param.dataPath,\n          },\n\n          onLoading: onLoading('offers'),\n        }).then();\n      },\n    }),\n    [actionsCreator, filterSelectors, getAll, onLoading, state.list]\n  );\n\n  useEffect(() => {\n    if (state.list.length === 0) {\n      getAll({\n        onLoading: onLoading('offers'),\n      });\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    // filterParams,\n    searchParams,\n  };\n};\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../i18e';\nimport { toOfferFormData } from '../../utils';\nimport { OfferEntity, OfferTypeEnum } from '../../types/offers/offers.types';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { AppLoaderSpiner } from '../atoms/AppLoaderSpiner';\nimport { Text } from '../atoms/Text';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider } from 'Providers/Loaders/LoaderProvider';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\nimport OfferTagsFormArea from '../Forms/offers/OfferTagsFormArea';\nimport PriceDiscountsFormArea from '../Forms/pricing/PriceDiscountsFormArea';\n\nexport interface EditOfferModalProps extends ModalFormProps {\n  copy?: boolean;\n  offer: OfferEntity;\n}\n\nconst EditOfferModal: React.FC<EditOfferModalProps> = ({ onClose, offer, copy }) => {\n  const Offer = useCurrentOffer(offer);\n  // const service = useOffersService();\n  // const router = useAppRouter();\n\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>(\n    { offer_refresh: { content: 'Refreshing...' }, offer_update: { content: 'Updating...' } },\n    {\n      formData: Offer ? toOfferFormData(Offer) : { type: OfferTypeEnum.GOODS },\n    }\n  );\n\n  const { setData, state } = loaders;\n\n  const offerId = copy ? state.formData?._id : Offer?._id;\n\n  if (!Offer) {\n    return (\n      <ModalBase title={!copy ? t('Update offer') : t('Copy offer')} fillHeight>\n        <FlexBox fillWidth fillHeight padding={'26px'} alignItems={'center'} justifyContent={'center'}>\n          <Text $size={16} $weight={600}>\n            {t('Offer not found')}\n          </Text>\n        </FlexBox>\n      </ModalBase>\n    );\n  }\n\n  return (\n    <ModalBase fillHeight title={!copy ? t('Update offer') : t('Copy offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        {loaders.isLoading?.offer ? (\n          <FlexBox fillWidth padding={'24px'} alignItems={'center'} gap={16}>\n            <AppLoaderSpiner size={52} />\n\n            <Text>{t('Loading info about offer...')}</Text>\n          </FlexBox>\n        ) : (\n          <FlexBox padding={'0 0 16px'}>\n            <OfferBaseInfoFormArea\n              _id={offerId}\n              edit={!copy}\n              type={state.formData?.type}\n              defaultValues={state?.formData}\n              onSuccess={({ data }) => {\n                setData('formData', copy ? { ...toOfferFormData(data), _id: data._id } : toOfferFormData(data));\n              }}\n            />\n\n            <OfferFormCategoriesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.categoriesIds}\n              disabled={!state.formData}\n            />\n\n            <OfferFormPropertiesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.propertiesIds}\n              disabled={!state.formData}\n            />\n\n            <OfferPriceFormArea\n              expandable={true}\n              isOpen={false}\n              offer={Offer}\n              defaultState={Offer?.price}\n              price={Offer?.price}\n              title={t('Price')}\n            />\n\n            {Offer?.price && <PriceDiscountsFormArea price={Offer?.price} />}\n\n            <OfferFormImagesArea\n              offer={Offer}\n              defaultValues={state?.formData?.images}\n              disabled={!state?.formData}\n              _id={offerId}\n            />\n\n            <OfferTagsFormArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.tagsIds}\n              disabled={!state.formData}\n            />\n\n            <OfferDimensionsFormArea\n              offer={Offer}\n              defaultValues={state.formData?.dimensions}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n            <OfferMeasurementFormArea\n              offer={Offer}\n              defaultValues={state.formData?.measurement}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n          </FlexBox>\n        )}\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default EditOfferModal;\n"],"names":["loaders","arguments","length","undefined","service","useAppServiceProvider","get","ServiceName","router","useAppRouter","modals","useModalProvider","stateMap","useOffersSelector","dataMap","useCallback","ctx","_ctx$selectedRow","currentId","selectedRow","_id","Offer","name","icon","onClick","create","OffersFilterModal","onSubmit","data","getAll","params","toReqData","separator","title","t","type","refresh","onLoading","onRefresh","disabled","navTo","concat","permissionId","iconSize","EditOfferModal","offer","getOne","onSuccess","_ref2","copy","CreateOfferModal","keys","_ref3","_template$childrenLis","_filter$formValues$wa","onClose","dirTags","useDirectorySelector","ApiDirType","dirBrands","dirCategories","dirProperties","usePropertiesSelector","warehouses","useWarehousesSelector","list","filter","useAppForm","offerStatusFilterOptions","enumToFilterOptions","OfferStatusEnum","_useState","useState","_useState2","_slicedToArray","template","setTemplate","mappedOptions","useMemo","tags","directory","map","item","index","_item$label","_objectSpread","label","value","categories","_item$label2","brands","_item$label3","properties","_item$label4","_item$label5","_jsx","ModalBase","children","_jsxs","FlexForm","padding","handleSubmit","fData","console","log","omit","InputLabel","TagButtonsFilter","onSelectValue","option","setValue","formValues","approved","options","ButtonsGroup","offerTypeFilterOptions","form","ButtonSwitch","visible","onChange","val","shouldTouch","shouldDirty","AccordionFormArea","hideFooter","multiple","values","tagsIds","maxHeight","OfferCategoriesSelector","onChangeIds","ids","selectedIds","categoriesIds","TabSelector","defaultOption","onOptSelect","childrenList","_filter$formValues$pr","OfferPropertySelector","propsIdsMap","propId","valueIds","_filter$formValues$pr2","Array","from","Set","_toConsumableArray","propertiesIds","brandsIds","warehouse","key","FlexBox","gap","fxDirection","fillWidth","xsStyles","margin","flex","toLowerCase","InputText","register","ModalFooter","hasOnSubmit","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useOffersTableSettin","useOffersTableSettings","tableConfig","isLoading","AppGridPage","path","TableList","showFooter","offers","_ref","searchState","sortState","useLoaders","content","AppModuleName","state","filterSelectors","useProductsFilterSelectorsHook","actionsCreator","useOffersActionsCreator","sortParams","setSortParams","_useState3","_useState4","searchParams","setSearchParams","onSubmitSearch","search","_data$param","param","dataPath","isString","setValueByPath","mutation","then","tableData","tableTitles","offersTableColumns","offersSearchParams","offersSortParams","hasFilter","hasSearch","checkBoxes","onTableSortChange","order","sortOrder","sortPath","useEffect","_state$formData","_loaders$isLoading","_state$formData2","_state$formData3","_state$formData4","_state$formData5","_state$formData6","_state$formData7","_state$formData8","_state$formData9","_state$formData10","useCurrentOffer","offer_refresh","offer_update","formData","toOfferFormData","OfferTypeEnum","setData","offerId","fillHeight","LoadersProvider","alignItems","AppLoaderSpiner","size","Text","OfferBaseInfoFormArea","edit","defaultValues","OfferFormCategoriesArea","OfferFormPropertiesArea","OfferPriceFormArea","expandable","isOpen","defaultState","price","PriceDiscountsFormArea","OfferFormImagesArea","images","OfferTagsFormArea","OfferDimensionsFormArea","dimensions","OfferMeasurementFormArea","measurement","justifyContent","$size","$weight"],"sourceRoot":""}