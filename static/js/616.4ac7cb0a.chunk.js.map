{"version":3,"file":"static/js/616.4ac7cb0a.chunk.js","mappings":"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","sources":["hooks/usePermissonsActionsCreator.ts","components/AppPages/PageHome.tsx","components/AppPages/PageSelectCompany.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { ITableAction, ITableListContext, TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport { PermissionEntity } from '../types/permissions.types';\nimport { PermissionService } from './usePermissionsService.hook';\nimport { IModalProviderContext, useModalService } from '../Providers/ModalProvider/ModalProvider';\nimport { useNavigate } from 'react-router-dom';\nimport { Modals } from '../components/Modals/Modals';\nimport { useAppServiceProvider } from './useAppServices.hook';\nimport { AppModuleName } from '../redux/reduxTypes.types';\nimport { TableActionsBuilder } from '../utils/tables';\nimport { t } from '../i18e';\nimport { useAuthSelector } from '../redux/selectors.store';\nimport { CompanyQueryType, CompanyQueryTypeEnum } from '../types/companies/companies.types';\nimport { ToastService } from '../services';\nimport { AppRouter, useAppRouter } from './useRouter.hook';\n\nexport type PermissionsActionsCreator = TableActionsCreator<PermissionEntity>;\n\nexport type PermissionsActionsType =\n  | 'enterCompany'\n  | 'editCompany'\n  | 'deleteCompany'\n  | 'leaveCompany'\n  | 'rejectPermission'\n  | 'acceptPermission'\n  | 'createCompany'\n  | 'createPermission'\n  | 'deletePermission'\n  | 'editPermission';\nexport const isMyCompany = ({ owner, user }: PermissionEntity) => {\n  return user?._id === owner?._id;\n};\n\nexport interface PermissionsTablesActionProps {\n  ctx: ITableListContext<PermissionEntity>;\n  router: AppRouter;\n  service: PermissionService;\n  companyType: CompanyQueryTypeEnum;\n  modalService: IModalProviderContext;\n}\n\nexport type IPermissionsTableAction = ITableAction<PermissionsActionsType>;\nexport type PermissionsActionCreator = (options: PermissionsTablesActionProps) => IPermissionsTableAction;\nconst createEnterCompanyAction = ({ ctx, router, service }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'enterCompany',\n  title: 'Перейти',\n  icon: 'logIn',\n  disabled: !ctx.selectedRow?._id,\n  iconSize: '100%',\n  type: 'onlyIcon',\n  onClick: () => {\n    console.log(ctx.selectedRow);\n\n    if (ctx.selectedRow?._id) {\n      service.logIn({\n        data: { _id: ctx.selectedRow?._id },\n        onSuccess: data => {\n          if (!data._id) return console.log('data', data);\n          ToastService.success(`Welcome: \"${data.company?.name?.first || data.company?.label?.base}\"`);\n          router.push({ pathname: `/app/${data._id}` });\n        },\n        onError: error => {\n          console.log(error);\n        },\n      });\n    }\n  },\n});\nconst createEditCompanyAction = ({\n  ctx,\n  companyType,\n  modalService,\n}: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'editCompany',\n  title: 'Редагувати',\n  icon: 'edit',\n  disabled: ctx.selectedRow?._id && companyType ? !['own'].includes(companyType) : true,\n  iconSize: '100%',\n  type: 'onlyIcon',\n  onClick: () => {\n    modalService.openModal({\n      Modal: Modals.FormCreateCompany,\n      modalChildrenProps: {\n        fillHeight: true,\n        title: 'Редагувати компанію',\n      },\n    });\n  },\n});\nconst createDeleteCompanyAction = ({ companyType, ctx }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'deleteCompany',\n  title: 'Видалити',\n  icon: 'delete',\n  iconSize: '100%',\n  disabled: ctx.selectedRow?._id && companyType ? ['own'].includes(companyType) : false,\n  type: 'onlyIcon',\n  onClick: () => {\n    console.log('selPermission', ctx.selectedRow?._id);\n  },\n});\n\nconst createLogOutCompanyAction = ({ companyType, ctx }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'leaveCompany',\n  title: 'Покинути',\n  icon: 'logOut',\n  iconSize: '100%',\n  disabled: ctx.selectedRow?._id && companyType ? !['invited'].includes(companyType) : true,\n  type: 'onlyIcon',\n  onClick: () => {\n    console.log('leaveCompany', ctx.selectedRow?._id);\n  },\n});\nconst createRejectPermission = ({ ctx, companyType }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'rejectPermission',\n  title: 'Відхилити',\n  icon: 'clear',\n  iconSize: '100%',\n  type: 'onlyIconFilled',\n  disabled: ctx.selectedRow?._id && companyType ? !['invites'].includes(companyType) : true,\n  onClick: () => {\n    console.log('rejectPermission', ctx.selectedRow);\n  },\n});\nconst createAcceptPermissionAction = ({ ctx, companyType }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'acceptPermission',\n  title: 'Прийняти',\n  icon: 'done',\n  iconSize: '100%',\n  type: 'onlyIconFilled',\n  disabled: ctx.selectedRow?._id && companyType ? !['invites'].includes(companyType) : true,\n  onClick: () => {\n    console.log('acceptPermission', ctx.selectedRow);\n  },\n});\nconst createAddNewCompanyAction = ({ modalService }: PermissionsTablesActionProps): IPermissionsTableAction => ({\n  name: 'createCompany',\n  title: 'Створити компанію',\n  icon: 'plus',\n  iconSize: '100%',\n  type: 'onlyIconFilled',\n  onClick: () => {\n    modalService.openModal({\n      Modal: Modals.FormCreateCompany,\n      props: {\n        fillHeight: true,\n        title: 'Створити компанію',\n      },\n    });\n  },\n});\nconst builder = new TableActionsBuilder<\n  PermissionService,\n  PermissionEntity,\n  { query: { type: CompanyQueryType }; userId?: string }\n>();\nbuilder.add('refresh', ({ ctx, service, extra }) => {\n  return {\n    name: 'refresh',\n    title: t('Refresh'),\n    icon: 'refresh',\n    iconSize: '100%',\n    type: 'onlyIcon',\n    disabled: !extra?.userId,\n    onClick: () => {\n      if (extra?.userId) {\n        service.getAllByUserId({\n          onLoading: ctx.onRefresh,\n          data: { userId: extra?.userId, query: extra?.query },\n        });\n      }\n    },\n  };\n});\n\nconst usePermissionsActionsCreator = (companyType: CompanyQueryTypeEnum): PermissionsActionsCreator => {\n  const service = useAppServiceProvider()[AppModuleName.permissions];\n  const modalService = useModalService();\n  const userId = useAuthSelector()?.user?._id;\n  const router = useAppRouter();\n  const navigate = useNavigate();\n\n  return (ctx): ITableAction<PermissionsActionsType>[] => {\n    // const builder = new TableActionsBuilder({\n    //   service,\n    //   modalService,\n    // })\n    //   .add('d', () => {\n    //     return { separator: true };\n    //   })\n    //   .add('a', () => {\n    //     return { separator: true };\n    //   })\n    //   .add('g', () => {\n    //     return { separator: true };\n    //   })\n    //   .add('f', () => {\n    //     return { separator: true };\n    //   });\n    // console.log({ builder });\n\n    const controls = {\n      ctx,\n      navigate,\n      service,\n      modalService,\n      companyType,\n      router,\n    };\n    const build = builder.activate({\n      navigate,\n      service,\n      modalService,\n      extra: {\n        userId,\n        query: { type: companyType },\n      },\n    });\n\n    return [\n      createEnterCompanyAction(controls),\n      createLogOutCompanyAction(controls),\n      { separator: true },\n      ...build(ctx),\n      { separator: true },\n      createEditCompanyAction(controls),\n      createDeleteCompanyAction(controls),\n      { separator: true },\n      createRejectPermission(controls),\n      createAcceptPermissionAction(controls),\n      createAddNewCompanyAction(controls),\n    ];\n  };\n};\n\nexport default usePermissionsActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { memo, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { takeFullGridArea, takeFullPlace } from './pagesStyles';\nimport { useAuthSelector } from 'redux/selectors.store';\nimport { usePermissionsSelector } from 'hooks/usePermissionsService.hook';\nimport { PermissionEntity } from '../../types/permissions.types';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport usePermissionsActionsCreator from '../../hooks/usePermissonsActionsCreator';\nimport { PermissionStatus } from 'types/permissions.types';\nimport { permissionsTableColumns } from '../../data/permissions.data';\nimport { permissionsSearchParams, permissionsSortParams } from '../../data/companies.data';\nimport { useAppServiceProvider } from '../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../redux/reduxTypes.types';\nimport { BaseAppPageProps } from './index';\nimport { PartialRecord } from '../../types/utils.types';\nimport { enumToFilterOptions } from '../../utils';\nimport { useAppRouter } from '../../hooks';\nimport TabSelector from '../atoms/TabSelector';\nimport FlexBox from '../atoms/FlexBox';\nimport { CompanyQueryTypeEnum } from 'types/companies/companies.types';\n\nconst companyFilterOptions = enumToFilterOptions(CompanyQueryTypeEnum);\n\ninterface Props extends Partial<BaseAppPageProps> {}\nconst PageHome: React.FC<Props> = ({ path }) => {\n  const { user } = useAuthSelector();\n  const { query, ...router } = useAppRouter();\n  const state = usePermissionsSelector();\n  const permissionsService = useAppServiceProvider()[AppModuleName.permissions];\n  const actionsCreator = usePermissionsActionsCreator(query.companyType || CompanyQueryTypeEnum.own);\n  const [loading, setLoading] = useState(false);\n\n  const { data } = useMemo(() => {\n    const type = query.companyType || CompanyQueryTypeEnum.own;\n    const companyTypeIs: PartialRecord<CompanyQueryTypeEnum, boolean> = {\n      [type]: true,\n    };\n\n    const data = state.permissions?.filter(pr => {\n      if (companyTypeIs.invited) return pr.status === PermissionStatus.ACCEPTED;\n      if (companyTypeIs.invites) return pr.status === PermissionStatus.PENDING;\n      if (companyTypeIs.all) return pr;\n      if (companyTypeIs.own) return pr.user?._id === pr.owner?._id;\n      return pr;\n    });\n\n    return {\n      companyTypeIs,\n      data,\n    };\n  }, [query.companyType, state.permissions]);\n\n  const tableConfig = useMemo(\n    (): ITableListProps<PermissionEntity> => ({\n      tableData: data,\n      tableTitles: permissionsTableColumns,\n      searchParams: permissionsSearchParams,\n      sortParams: permissionsSortParams,\n      hasFilter: false,\n      showFooter: true,\n      hasSearch: true,\n      checkBoxes: false,\n      actionsCreator,\n    }),\n    [actionsCreator, data]\n  );\n\n  useEffect(() => {\n    router.push({ query: { companyType: companyFilterOptions[0].value } });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      user._id && permissionsService.getAllByUserId({ data: { userId: user._id }, onLoading: setLoading });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user?._id]);\n\n  return (\n    <Page>\n      <Top>\n        {/*<ProfileInfo>/!*<ProfileCard {...user} />*!/</ProfileInfo>*/}\n\n        <TabSelector\n          options={companyFilterOptions}\n          onSelect={option => {\n            router.push({ query: { companyType: option.value } });\n          }}\n        />\n      </Top>\n\n      <Bottom>\n        <TableList {...tableConfig} isLoading={loading} />\n      </Bottom>\n    </Page>\n  );\n};\n\nconst Page = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: min-content 1fr;\n\n  ${takeFullGridArea}\n`;\nconst Top = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  position: relative;\n\n  overflow: hidden;\n\n  //background-color: ${({ theme }) => theme.tableBackgroundColor};\n\n  ${takeFullPlace}\n`;\nconst Bottom = styled(FlexBox)`\n  align-items: center;\n  justify-content: center;\n\n  overflow: hidden;\n  padding: 8px 0 16px;\n\n  ${takeFullPlace};\n\n  background-color: ${({ theme }) => theme.tableBackgroundColor};\n`;\n\n// const ProfileInfo = styled.div`\n//   position: sticky;\n//   top: 0;\n//   left: 0;\n//   z-index: 1;\n//\n//   padding: 16px 12px;\n//   width: 100%;\n//   max-width: 250px;\n// `;\n\nexport default memo(PageHome);\n","import AppGridPage from './AppGridPage';\nimport PageHome from './PageHome';\nimport { memo } from 'react';\nimport { BaseAppPageProps } from './index';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageSelectCompany: React.FC<Props> = ({ path }) => {\n  return (\n    <AppGridPage path={path}>\n      <PageHome />\n    </AppGridPage>\n  );\n};\n\nexport default memo(PageSelectCompany);\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["createEnterCompanyAction","_ref2","_ctx$selectedRow","ctx","router","service","name","title","icon","disabled","selectedRow","_id","iconSize","type","onClick","_ctx$selectedRow2","_ctx$selectedRow3","console","log","logIn","data","onSuccess","_data$company","_data$company$name","_data$company2","_data$company2$label","ToastService","concat","company","first","label","base","push","pathname","onError","error","createEditCompanyAction","_ref3","_ctx$selectedRow4","companyType","modalService","includes","openModal","Modal","Modals","modalChildrenProps","fillHeight","createDeleteCompanyAction","_ref4","_ctx$selectedRow5","_ctx$selectedRow6","createLogOutCompanyAction","_ref5","_ctx$selectedRow7","_ctx$selectedRow8","createRejectPermission","_ref6","_ctx$selectedRow9","createAcceptPermissionAction","_ref7","_ctx$selectedRow10","createAddNewCompanyAction","_ref8","props","builder","TableActionsBuilder","add","_ref9","extra","t","userId","getAllByUserId","onLoading","onRefresh","query","_useAuthSelector","_useAuthSelector$user","useAppServiceProvider","AppModuleName","useModalService","useAuthSelector","user","useAppRouter","navigate","useNavigate","controls","build","activate","separator","_toConsumableArray","companyFilterOptions","enumToFilterOptions","CompanyQueryTypeEnum","PageHome","_ref","path","_useAppRouter","_objectWithoutProperties","_excluded","state","usePermissionsSelector","permissionsService","actionsCreator","usePermissionsActionsCreator","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useMemo","useMemo","_state$permissions","companyTypeIs","_defineProperty","permissions","filter","pr","_pr$user","_pr$owner","invited","status","PermissionStatus","invites","all","own","owner","tableConfig","tableData","tableTitles","permissionsTableColumns","searchParams","permissionsSearchParams","sortParams","permissionsSortParams","hasFilter","showFooter","hasSearch","checkBoxes","useEffect","value","_jsxs","Page","children","_jsx","Top","TabSelector","options","onSelect","option","Bottom","TableList","_objectSpread","isLoading","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","_templateObject2","theme","tableBackgroundColor","takeFullPlace","FlexBox","_templateObject3","memo","PageSelectCompany","AppGridPage","css"],"sourceRoot":""}