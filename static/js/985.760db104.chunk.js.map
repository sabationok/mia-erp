{"version":3,"file":"static/js/985.760db104.chunk.js","mappings":"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","sources":["components/AppPages/customers/PageCustomerOverview.tsx","components/AppPages/pagesStyles.tsx","data/customers.data.ts"],"sourcesContent":["import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { ApiQuerySortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport { Path } from 'react-hook-form';\nimport { ICustomerBase } from '../../../types/customers.types';\nimport { customersColumns } from '../../../data/customers.data';\nimport { BaseAppPageProps } from '../index';\n\ninterface Props extends BaseAppPageProps {}\n\nexport type UseTableForm<TData = any> = FilterReturnDataType & {\n  sortKey?: Path<TData>;\n  sortOrder?: 'DESC' | 'ACS';\n  search?: string;\n  searchKey?: Path<TData>;\n};\n\nconst PageCustomerOverview: React.FC<Props> = props => {\n  const [isLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ApiQuerySortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n  useEffect(() => {\n    console.log('PageCustomerOverview', { sortParams, filterParams });\n  }, [filterParams, sortParams]);\n  const tableConfig = useMemo(\n    (): ITableListProps<ICustomerBase> => ({\n      // tableData: state.products,\n      tableTitles: customersColumns,\n      hasFilter: true,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        // getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      onTableSortChange: (param, sortOrder) => {\n        setSortParams({ sortPath: param.dataPath, sortOrder });\n        // getAll({\n        //   data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n        //   onLoading: setIsLoading,\n        // }).then();\n      },\n    }),\n    []\n  );\n\n  // useEffect(() => {\n  //   if (sortParams || filterParams) {\n  //     return;\n  //   }\n  //\n  //   if (!sortParams && !filterParams) {\n  //     if (state.products.length === 0) {\n  //       getAll({\n  //         data: { refresh: true },\n  //         onLoading: setIsLoading,\n  //       });\n  //     }\n  //   }\n  // }, [filterParams, getAll, sortParams, state.products.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageCustomerOverview;\n\nexport const useCustomersTableSettings = () => {\n  const [isLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ApiQuerySortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<ICustomerBase> => ({\n      hasFilter: true,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        // getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      onTableSortChange: (param, sortOrder) => {\n        setSortParams({ sortPath: param.dataPath, sortOrder });\n        // getAll({\n        //   data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n        //   onLoading: setIsLoading,\n        // }).then();\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      // if (state.products.length === 0) {\n      //   getAll({\n      //     data: { refresh: true },\n      //     onLoading: setIsLoading,\n      //   });\n      // }\n    }\n  }, [filterParams, isLoading, sortParams, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { CustomerEntity } from '../types/customers.types';\nimport { t } from '../lang';\n\nexport const customersColumns: CellTittleProps<CustomerEntity>[] = [\n  {\n    top: {\n      name: `${t('label')}/${t('name')}`,\n      getData: d => {\n        const entry = d.label ?? d.name;\n\n        return entry\n          ? Object.values(entry)\n              .map(value => value ?? '')\n              .join(' ')\n          : '---';\n      },\n    },\n    bottom: { name: 'ІПН/ЄДРПОУ', getData: d => (d.taxCode?.personal || '---') + '/' + (d.taxCode?.corp || '---') },\n    width: '240px',\n    action: 'doubleDataWithAvatar',\n  },\n  {\n    top: { name: 'Тип', getData: d => d?.type },\n    bottom: { name: 'Статус', path: 'status' },\n    width: '120px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Емейл', path: 'email', uppercase: false },\n    bottom: { name: 'Телефон', path: 'phone' },\n    width: '170px',\n    action: 'contacts',\n  },\n  {\n    top: { name: 'Локація' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Теги', path: 'tags' },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: 'Коментар', path: 'description' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateSimple',\n  },\n];\n"],"names":["Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useState","useState","isLoading","_slicedToArray","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","useEffect","console","log","tableConfig","useMemo","tableTitles","customersColumns","hasFilter","hasSearch","showFooter","checkBoxes","onFilterSubmit","onTableSortChange","param","sortOrder","sortPath","dataPath","_jsx","AppGridPage","path","children","TableList","_objectSpread","useCustomersTableSettings","_useState7","_useState9","_useState10","_useState11","_useState12","css","takeFullPlace","_templateObject2","_templateObject3","top","name","concat","t","getData","d","_d$label","entry","label","Object","values","map","value","join","bottom","_d$taxCode","_d$taxCode2","taxCode","personal","corp","width","action","type","uppercase","align"],"sourceRoot":""}